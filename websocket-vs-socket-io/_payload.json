[{"data":1,"prerenderedAt":445},["Reactive",2],{"content-query-S0unVNuvVc":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":5,"_empty":6,"title":7,"description":8,"excerpt":9,"category":48,"updated":49,"created":49,"published":50,"body":51,"_type":440,"_id":441,"_source":442,"_file":443,"_extension":444},"/websocket-vs-socket-io","",false,"웹소켓과 socket.io","예전에 회사 프로젝트를 진행할 때, 지도에 실시간으로 사용자의 위치를 보여주는 기능이 필요해서 socket.io 를 사용해서 구현했던 적이 있습니다.",{"type":10,"children":11},"root",[12,35],{"type":13,"tag":14,"props":15,"children":16},"element","p",{},[17,20,33],{"type":18,"value":19},"text","예전에 회사 프로젝트를 진행할 때, 지도에 실시간으로 사용자의 위치를 보여주는 기능이 필요해서 ",{"type":13,"tag":21,"props":22,"children":26},"a",{"href":23,"rel":24},"https://socket.io",[25],"nofollow",[27],{"type":13,"tag":28,"props":29,"children":30},"code-inline",{},[31],{"type":18,"value":32},"socket.io",{"type":18,"value":34}," 를 사용해서 구현했던 적이 있습니다.",{"type":13,"tag":14,"props":36,"children":37},{},[38,40,46],{"type":18,"value":39},"여태까지 저는 그냥 무지성으로 실시간이면 무조건 socket.io 써야지~ 했었는데, 이번에 ",{"type":13,"tag":21,"props":41,"children":43},{"href":42},"/cryptocurrency-price-in-a-second",[44],{"type":18,"value":45},"코인 시세 모니터링 앱",{"type":18,"value":47},"을 만들 때 소켓 기술을 이용해서 실시간으로 데이터를 받아와야 할 일이 있었습니다.","tech","2021-06-02T00:00:00.000Z",true,{"type":10,"children":52,"toc":430},[53,66,75,80,85,92,105,110,115,120,128,148,156,174,180,185,190,195,200,205,217,223,228,245,262,267,281,286,298,304,309,321,326,338,350,362,367,372,384,389,401,407],{"type":13,"tag":14,"props":54,"children":55},{},[56,57,65],{"type":18,"value":19},{"type":13,"tag":21,"props":58,"children":60},{"href":23,"rel":59},[25],[61],{"type":13,"tag":28,"props":62,"children":63},{},[64],{"type":18,"value":32},{"type":18,"value":34},{"type":13,"tag":14,"props":67,"children":68},{},[69,70,74],{"type":18,"value":39},{"type":13,"tag":21,"props":71,"children":72},{"href":42},[73],{"type":18,"value":45},{"type":18,"value":47},{"type":13,"tag":14,"props":76,"children":77},{},[78],{"type":18,"value":79},"근데 이번에는 회사에서 소켓을 사용할 때와는 연결 방식이 달라서 조금 이상하다고 생각했습니다. 그래서 열심히 구글링을 해보니 둘이 아예 다르더군요.",{"type":13,"tag":14,"props":81,"children":82},{},[83],{"type":18,"value":84},"그리 많은 내용은 아니지만, 저처럼 두 개의 차이를 모르셨던 분들을 위해 혼자 정리한 내용을 공유할까 합니다.",{"type":13,"tag":86,"props":87,"children":89},"h2",{"id":88},"websocket-vs-socketio",[90],{"type":18,"value":91},"WebSocket vs socket.io",{"type":13,"tag":14,"props":93,"children":94},{},[95,97,103],{"type":18,"value":96},"사실 애초에 둘은 다른 개념입니다. 웹소켓은 양방향 소통을 위한 프로토콜입니다. 프로토콜은 쉽게 말하자면 ",{"type":13,"tag":98,"props":99,"children":100},"strong",{},[101],{"type":18,"value":102},"서로 다른 컴퓨터끼리 소통하기 위한 약속",{"type":18,"value":104}," 정도로 이해하면 됩니다.",{"type":13,"tag":14,"props":106,"children":107},{},[108],{"type":18,"value":109},"반면에, socket.io는 양방햔 통신을 하기위해 웹소켓 기술을 활용하는 라이브러리입니다. 어찌보면 자바스크립트와 jQuery의 관계와 비슷하다고 할 수 있겠습니다.",{"type":13,"tag":14,"props":111,"children":112},{},[113],{"type":18,"value":114},"그렇기 때문에 socket.io가 같은 기능을 구현하더라도 약간 느리지만, 많은 편의성을 제공합니다. 또한 Java, C++, Python 등 여러 언어들의 라이브러리 또한 지원됩니다.",{"type":13,"tag":14,"props":116,"children":117},{},[118],{"type":18,"value":119},"그렇다면 둘 사이에 기술적으로 어떤 차이점이 있는지 짧게 정리했습니다.",{"type":13,"tag":14,"props":121,"children":122},{},[123],{"type":13,"tag":98,"props":124,"children":125},{},[126],{"type":18,"value":127},"WebSocket",{"type":13,"tag":129,"props":130,"children":131},"ul",{},[132,138,143],{"type":13,"tag":133,"props":134,"children":135},"li",{},[136],{"type":18,"value":137},"HTML5 웹 표준 기술",{"type":13,"tag":133,"props":139,"children":140},{},[141],{"type":18,"value":142},"매우 빠르게 작동하며 통신할 때 아주 적은 데이터를 이용함",{"type":13,"tag":133,"props":144,"children":145},{},[146],{"type":18,"value":147},"이벤트를 단순히 듣고, 보내는 것만 가능함",{"type":13,"tag":14,"props":149,"children":150},{},[151],{"type":13,"tag":98,"props":152,"children":153},{},[154],{"type":18,"value":155},"Socket.io",{"type":13,"tag":129,"props":157,"children":158},{},[159,164,169],{"type":13,"tag":133,"props":160,"children":161},{},[162],{"type":18,"value":163},"표준 기술이 아니며, 라이브러리임",{"type":13,"tag":133,"props":165,"children":166},{},[167],{"type":18,"value":168},"소켓 연결 실패 시 fallback을 통해 다른 방식으로 알아서 해당 클라이언트와 연결을 시도함",{"type":13,"tag":133,"props":170,"children":171},{},[172],{"type":18,"value":173},"방 개념을 이용해 일부 클라이언트에게만 데이터를 전송하는 브로드캐스팅이 가능함",{"type":13,"tag":86,"props":175,"children":177},{"id":176},"그래서-어떤-걸-써야하는데",[178],{"type":18,"value":179},"그래서 어떤 걸 써야하는데?",{"type":13,"tag":14,"props":181,"children":182},{},[183],{"type":18,"value":184},"짧게 정리했지만 사실, 이 정도는 다른 블로그나 문서에도 이미 잘 설명되어 있는 내용입니다.",{"type":13,"tag":14,"props":186,"children":187},{},[188],{"type":18,"value":189},"그렇다면 우리에게 정말 중요한 것은 대체 언제 WebSocket을 사용하고, 언제 socket.io를 사용해야할 지 기준을 정해야 하는 것이겠죠.",{"type":13,"tag":14,"props":191,"children":192},{},[193],{"type":18,"value":194},"개인적으로 이렇습니다. 서버에서 연결된 소켓(사용자)들을 세밀하게 관리해야하는 서비스인 경우에는 Broadcasting 기능이 있는 socket.io을 쓰는게 유지보수 측면에서 훨씬 이점이 많습니다.",{"type":13,"tag":14,"props":196,"children":197},{},[198],{"type":18,"value":199},"반면 가상화폐 거래소같이 데이터 전송이 많은 경우에는 빠르고 비용이 적은 표준 WebSocket을 이용하는게 바람직하겠죠. 실제로 업비트나 바이낸스 소켓 API를 사용해보면 정말 엄청나게 많은 데이터가 들어옵니다.",{"type":13,"tag":14,"props":201,"children":202},{},[203],{"type":18,"value":204},"결국 선택의 몫은 어떤 서비스를 제공할 것인가에 따라 달려있네요. (진리의 케바케)",{"type":13,"tag":14,"props":206,"children":207},{},[208,210,215],{"type":18,"value":209},"아, 추가로 여러분들이 알아두셔야 할 내용이 있습니다. socket.io로 구성된 서버에게 소켓 연결을 하기 위해서는 클라이언트측에서 반드시 ",{"type":13,"tag":28,"props":211,"children":212},{},[213],{"type":18,"value":214},"socket.io-client",{"type":18,"value":216}," 라이브러리를 이용해야합니다. 꼭 짝을 맞춰주세요.",{"type":13,"tag":86,"props":218,"children":220},{"id":219},"웹소켓-websocket-구현-예제",[221],{"type":18,"value":222},"웹소켓 (WebSocket) 구현 예제",{"type":13,"tag":14,"props":224,"children":225},{},[226],{"type":18,"value":227},"소켓은 양방향 연결이기 때문에 서버와 클라이언트측에서 같이 구현을 해야합니다. 이번 예제는 Node.js를 이용해 서버를 구성하겠습니다.",{"type":13,"tag":14,"props":229,"children":230},{},[231,233,243],{"type":18,"value":232},"먼저 Node.js에서 표준 웹소켓을 구성하려면 ",{"type":13,"tag":21,"props":234,"children":237},{"href":235,"rel":236},"https://www.npmjs.com/package/ws",[25],[238],{"type":13,"tag":28,"props":239,"children":240},{},[241],{"type":18,"value":242},"ws",{"type":18,"value":244}," 패키지를 사용하면 됩니다.",{"type":13,"tag":246,"props":247,"children":253},"code",{"className":248,"code":250,"filename":251,"language":252,"meta":5},[249],"language-bash","$ npm install ws\n","shell","bash",[254],{"type":13,"tag":255,"props":256,"children":257},"pre",{},[258],{"type":13,"tag":246,"props":259,"children":260},{"__ignoreMap":5},[261],{"type":18,"value":250},{"type":13,"tag":14,"props":263,"children":264},{},[265],{"type":18,"value":266},"다음은 간단한 서버측 예제입니다.",{"type":13,"tag":246,"props":268,"children":273},{"className":269,"code":271,"language":272,"meta":5},[270],"language-js","const WebSocket = require('ws')\n\nconst wss = new WebSocket.Server({ port: 3000 })\n\nwss.on('connection', ws => {\n  ws.on('message', message => {\n    console.log('received: %s', message)\n  })\n\n  ws.send('something')\n})\n","js",[274],{"type":13,"tag":255,"props":275,"children":276},{},[277],{"type":13,"tag":246,"props":278,"children":279},{"__ignoreMap":5},[280],{"type":18,"value":271},{"type":13,"tag":14,"props":282,"children":283},{},[284],{"type":18,"value":285},"다음은 클라이언트측 입니다. 웹소켓은 HTML5 모듈이기 때문에 클라이언트 측에서는 따로 모듈을 설치할 필요가 없습니다.",{"type":13,"tag":246,"props":287,"children":290},{"className":288,"code":289,"language":272,"meta":5},[270],"const ws = new WebSocket('ws://localhost:3000')\n\nws.on('open', () => {\n  ws.send('something')\n})\n\nws.on('message', data => {\n  console.log(data)\n})\n",[291],{"type":13,"tag":255,"props":292,"children":293},{},[294],{"type":13,"tag":246,"props":295,"children":296},{"__ignoreMap":5},[297],{"type":18,"value":289},{"type":13,"tag":86,"props":299,"children":301},{"id":300},"socketio-구현-예제",[302],{"type":18,"value":303},"Socket.io 구현 예제",{"type":13,"tag":14,"props":305,"children":306},{},[307],{"type":18,"value":308},"먼저 Node.js에서 socket.io를 사용하기 위해 패키지를 설치해줍니다.",{"type":13,"tag":246,"props":310,"children":313},{"className":311,"code":312,"filename":251,"language":252,"meta":5},[249],"npm install socket.io\n",[314],{"type":13,"tag":255,"props":315,"children":316},{},[317],{"type":13,"tag":246,"props":318,"children":319},{"__ignoreMap":5},[320],{"type":18,"value":312},{"type":13,"tag":14,"props":322,"children":323},{},[324],{"type":18,"value":325},"다음은 서버 측 예제입니다.",{"type":13,"tag":246,"props":327,"children":330},{"className":328,"code":329,"language":272,"meta":5},[270],"const server = require('http').createServer()\n\nconst io = require('socket.io')(server)\nio.on('connection', socket => {\n  socket.on('message', msg => {\n    console.log(msg)\n  })\n})\n\nserver.listen(3000)\n",[331],{"type":13,"tag":255,"props":332,"children":333},{},[334],{"type":13,"tag":246,"props":335,"children":336},{"__ignoreMap":5},[337],{"type":18,"value":329},{"type":13,"tag":14,"props":339,"children":340},{},[341,343,348],{"type":18,"value":342},"만약 서버에서 ",{"type":13,"tag":28,"props":344,"children":345},{},[346],{"type":18,"value":347},"express",{"type":18,"value":349},"를 사용하고 있다면 이렇게 사용하면 됩니다.",{"type":13,"tag":246,"props":351,"children":354},{"className":352,"code":353,"language":272,"meta":5},[270],"const app = require('express')()\nconst server = require('http').createServer(app)\nconst io = require('socket.io')(server)\n\nio.on('connection', socket => {\n  /* … */\n})\n\nserver.listen(3000)\n",[355],{"type":13,"tag":255,"props":356,"children":357},{},[358],{"type":13,"tag":246,"props":359,"children":360},{"__ignoreMap":5},[361],{"type":18,"value":353},{"type":13,"tag":14,"props":363,"children":364},{},[365],{"type":18,"value":366},"다음은 클라이언트 측 예제입니다. 아까 말했듯이 socket.io로 구성된 서버에겐 반드시 socket.io-client 패키지로 연결을 시도해야합니다.",{"type":13,"tag":14,"props":368,"children":369},{},[370],{"type":18,"value":371},"패키지를 설치합니다.",{"type":13,"tag":246,"props":373,"children":376},{"className":374,"code":375,"filename":251,"language":252,"meta":5},[249],"$ npm install socket.io-client\n",[377],{"type":13,"tag":255,"props":378,"children":379},{},[380],{"type":13,"tag":246,"props":381,"children":382},{"__ignoreMap":5},[383],{"type":18,"value":375},{"type":13,"tag":14,"props":385,"children":386},{},[387],{"type":18,"value":388},"다음은 자바스크립트 예제입니다.",{"type":13,"tag":246,"props":390,"children":393},{"className":391,"code":392,"language":272,"meta":5},[270],"const io = require('socket.io-client')\n\nconst socket = io('http://localhost:3000')\n\nsocket.emit('message', 'hello world!')\n",[394],{"type":13,"tag":255,"props":395,"children":396},{},[397],{"type":13,"tag":246,"props":398,"children":399},{"__ignoreMap":5},[400],{"type":18,"value":392},{"type":13,"tag":402,"props":403,"children":405},"h3",{"id":404},"참고",[406],{"type":18,"value":404},{"type":13,"tag":129,"props":408,"children":409},{},[410,420],{"type":13,"tag":133,"props":411,"children":412},{},[413],{"type":13,"tag":21,"props":414,"children":417},{"href":415,"rel":416},"https://www.educba.com/websocket-vs-socket-io/",[25],[418],{"type":18,"value":419},"Difference Between WebSocket and Socket.io - Educba",{"type":13,"tag":133,"props":421,"children":422},{},[423],{"type":13,"tag":21,"props":424,"children":427},{"href":425,"rel":426},"https://stackoverflow.com/questions/10112178/differences-between-socket-io-and-websockets",[25],[428],{"type":18,"value":429},"Differences between socket.io and websockets - Stackoverflow",{"title":5,"searchDepth":431,"depth":431,"links":432},2,[433,434,435,436],{"id":88,"depth":431,"text":91},{"id":176,"depth":431,"text":179},{"id":219,"depth":431,"text":222},{"id":300,"depth":431,"text":303,"children":437},[438],{"id":404,"depth":439,"text":404},3,"markdown","content:websocket-vs-socket-io.md","content","websocket-vs-socket-io.md","md",1691494669436]