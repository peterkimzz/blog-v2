[{"data":1,"prerenderedAt":1022},["Reactive",2],{"content-query-H2SAocF42E":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":5,"_empty":6,"title":7,"description":8,"excerpt":9,"category":42,"updated":43,"created":43,"thumbnail":44,"published":45,"body":46,"_type":1017,"_id":1018,"_source":1019,"_file":1020,"_extension":1021},"/super-easy-docker","",false,"정말 너무 쉬운 Docker","우리가 Docker를 사용해야하는 가장 큰 이유는, 어떤 컴퓨터에서든 똑같은 개발 환경을 보장해주기 떄문입니다. 로컬 컴퓨터에서 열심히 개발하고 AWS에 코드를 올렸는데, 에러를 마주하며 스트레스를 받았던 경험이 한 번쯤은 있을겁니다. 내 컴퓨터랑 클라우드 컴퓨터의 환경이 100% 똑같지 않기 때문이죠. 근데 이 어려움을 한 번에 해결해준다? 쓰지 말아야 할 이유가 없습니다.",{"type":10,"children":11},"root",[12],{"type":13,"tag":14,"props":15,"children":16},"element","p",{},[17,20,33,35,40],{"type":18,"value":19},"text","우리가 ",{"type":13,"tag":21,"props":22,"children":26},"a",{"href":23,"rel":24},"https://docker.com",[25],"nofollow",[27],{"type":13,"tag":28,"props":29,"children":30},"code-inline",{},[31],{"type":18,"value":32},"Docker",{"type":18,"value":34},"를 사용해야하는 가장 큰 이유는, 어떤 컴퓨터에서든 똑같은 개발 환경을 보장해주기 떄문입니다. 로컬 컴퓨터에서 열심히 개발하고 ",{"type":13,"tag":28,"props":36,"children":37},{},[38],{"type":18,"value":39},"AWS",{"type":18,"value":41},"에 코드를 올렸는데, 에러를 마주하며 스트레스를 받았던 경험이 한 번쯤은 있을겁니다. 내 컴퓨터랑 클라우드 컴퓨터의 환경이 100% 똑같지 않기 때문이죠. 근데 이 어려움을 한 번에 해결해준다? 쓰지 말아야 할 이유가 없습니다.","tech","2021-06-09T00:00:00.000Z","https://dynamisign.com/api/sign?t=%EC%A0%95%EB%A7%90%20%EB%84%88%EB%AC%B4%20%EC%89%AC%EC%9A%B4%20Docker&d=peterkimzz.com",true,{"type":10,"children":47,"toc":1005},[48,66,71,90,97,102,119,124,136,141,154,164,179,191,203,217,236,261,270,276,297,309,321,332,344,356,361,374,408,426,436,441,453,472,477,489,494,506,518,523,535,554,566,572,584,589,600,615,633,656,661,673,678,691,703,715,721,732,744,769,776,788,800,812,818,836,841,853,871,883,895,913,918,930,946,963,975,980],{"type":13,"tag":14,"props":49,"children":50},{},[51,52,60,61,65],{"type":18,"value":19},{"type":13,"tag":21,"props":53,"children":55},{"href":23,"rel":54},[25],[56],{"type":13,"tag":28,"props":57,"children":58},{},[59],{"type":18,"value":32},{"type":18,"value":34},{"type":13,"tag":28,"props":62,"children":63},{},[64],{"type":18,"value":39},{"type":18,"value":41},{"type":13,"tag":14,"props":67,"children":68},{},[69],{"type":18,"value":70},"이 뿐만이 아닙니다. 내 앱을 실행하기 위한 모든 과정을 미리 패키징해두면 몇 초만에 앱 수 십개를 구동할 수도 있습니다. 서비스를 확장할수록 더 많은 인스턴스를 운영해야하기 때문에 반드시 도커를 사용해야 할 시점이 오게 됩니다.",{"type":13,"tag":14,"props":72,"children":73},{},[74,76,81,83,88],{"type":18,"value":75},"이번 포스팅에서는 ",{"type":13,"tag":28,"props":77,"children":78},{},[79],{"type":18,"value":80},"node.js",{"type":18,"value":82},"와 ",{"type":13,"tag":28,"props":84,"children":85},{},[86],{"type":18,"value":87},"typescript",{"type":18,"value":89},"를 사용하는 아주 간단한 서버를 도커라이징하고, 도커를 더 쉽고 효율적으로 사용하는 몇 가지 팁들을 알려드리겠습니다.",{"type":13,"tag":91,"props":92,"children":94},"h2",{"id":93},"nodejs-서버-만들기",[95],{"type":18,"value":96},"Node.js 서버 만들기",{"type":13,"tag":14,"props":98,"children":99},{},[100],{"type":18,"value":101},"일단 프로젝트 폴더를 구성합니다.",{"type":13,"tag":103,"props":104,"children":110},"code",{"className":105,"code":107,"filename":108,"language":109,"meta":5},[106],"language-bash","$ mkdir node-docker\n$ cd node-docker\n\n$ yarn init -y # package.json 만들기\n","shell","bash",[111],{"type":13,"tag":112,"props":113,"children":114},"pre",{},[115],{"type":13,"tag":103,"props":116,"children":117},{"__ignoreMap":5},[118],{"type":18,"value":107},{"type":13,"tag":14,"props":120,"children":121},{},[122],{"type":18,"value":123},"다음은 노드 서버를 돌리기 위한 패키지를 설치하고, 앱의 진입점이 될 타입스크립트 파일까지 만들어줍니다.",{"type":13,"tag":103,"props":125,"children":128},{"className":126,"code":127,"filename":108,"language":109,"meta":5},[106],"$ yarn add express\n$ yarn add -D typescript ts-node nodemon @types/node @types/express\n\n$ touch index.ts\n$ npx tsc --init # tsconfig.json 만들기\n",[129],{"type":13,"tag":112,"props":130,"children":131},{},[132],{"type":13,"tag":103,"props":133,"children":134},{"__ignoreMap":5},[135],{"type":18,"value":127},{"type":13,"tag":14,"props":137,"children":138},{},[139],{"type":18,"value":140},"여기까지 하면 우리 프로젝트 폴더의 구조는 다음과 같습니다.",{"type":13,"tag":103,"props":142,"children":146},{"className":143,"code":145},[144],"language-undefined","node-docker/\n|-- node_modules\n|-- index.ts\n|-- package.json\n|-- tsconfig.json\n|-- yarn.lock\n",[147],{"type":13,"tag":112,"props":148,"children":149},{},[150],{"type":13,"tag":103,"props":151,"children":152},{"__ignoreMap":5},[153],{"type":18,"value":145},{"type":13,"tag":14,"props":155,"children":156},{},[157,162],{"type":13,"tag":28,"props":158,"children":159},{},[160],{"type":18,"value":161},"express",{"type":18,"value":163},"는 노드에서 가장 많이 사용하는 서버 라이브러리입니다. 그럼 바로 스크립트를 작성하도록 합니다.",{"type":13,"tag":103,"props":165,"children":171},{"className":166,"code":168,"filename":169,"language":170,"meta":5},[167],"language-ts","import express from \"express\";\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n  res.json({ message: \"Hello, Docker!\" });\n});\n\napp.listen(3000);\nconsole.log(\"http://localhost:3000..\");\n","index.ts","ts",[172],{"type":13,"tag":112,"props":173,"children":174},{},[175],{"type":13,"tag":103,"props":176,"children":177},{"__ignoreMap":5},[178],{"type":18,"value":168},{"type":13,"tag":14,"props":180,"children":181},{},[182,184,189],{"type":18,"value":183},"서버에 요청할 때 마다 ",{"type":13,"tag":28,"props":185,"children":186},{},[187],{"type":18,"value":188},"Hello, Docker!",{"type":18,"value":190},"를 응답하는 간단한 서버입니다.",{"type":13,"tag":14,"props":192,"children":193},{},[194,196,201],{"type":18,"value":195},"서버 코드를 작성했으니 앱을 실행시켜야겠죠. ",{"type":13,"tag":28,"props":197,"children":198},{},[199],{"type":18,"value":200},"package.json",{"type":18,"value":202}," 파일을 수정합니다.",{"type":13,"tag":103,"props":204,"children":209},{"className":205,"code":207,"filename":200,"language":208,"meta":5},[206],"language-json","{\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon -L --exec ts-node index.ts\",\n    \"build\": \"tsc\"\n  }\n}\n","json",[210],{"type":13,"tag":112,"props":211,"children":212},{},[213],{"type":13,"tag":103,"props":214,"children":215},{"__ignoreMap":5},[216],{"type":18,"value":207},{"type":13,"tag":14,"props":218,"children":219},{},[220,222,227,229,234],{"type":18,"value":221},"터미널에 ",{"type":13,"tag":28,"props":223,"children":224},{},[225],{"type":18,"value":226},"yarn dev",{"type":18,"value":228},"를 입력하고, 브라우저를 통해 ",{"type":13,"tag":28,"props":230,"children":231},{},[232],{"type":18,"value":233},"localhost:3000",{"type":18,"value":235},"으로 접속해보면 메세지를 응답 받을 수 있습니다.",{"type":13,"tag":14,"props":237,"children":238},{},[239,241,246,248,253,255,259],{"type":18,"value":240},"추가로 개발 환경 때 시간 단축을 위해 ",{"type":13,"tag":28,"props":242,"children":243},{},[244],{"type":18,"value":245},"nodemon",{"type":18,"value":247}," 패키지를 사용합니다. ",{"type":13,"tag":28,"props":249,"children":250},{},[251],{"type":18,"value":252},"-L",{"type":18,"value":254}," (Legacy Watch) 플래그를 넣는 이유는 WindowsOS에서 ",{"type":13,"tag":28,"props":256,"children":257},{},[258],{"type":18,"value":170},{"type":18,"value":260}," 파일을 수정할 때 인식이 안되는 버그가 있어서 그렇습니다.",{"type":13,"tag":14,"props":262,"children":263},{},[264],{"type":13,"tag":265,"props":266,"children":269},"img",{"alt":267,"src":268},"image","https://user-images.githubusercontent.com/20244536/121014877-69af7500-c7d5-11eb-814c-dcbc963acdff.png",[],{"type":13,"tag":91,"props":271,"children":273},{"id":272},"dockerfile",[274],{"type":18,"value":275},"Dockerfile",{"type":13,"tag":14,"props":277,"children":278},{},[279,281,288,290,295],{"type":18,"value":280},"도커를 사용하기 위해 사용자 컴퓨터에 도커를 설치해야하는데, ",{"type":13,"tag":21,"props":282,"children":285},{"href":283,"rel":284},"https://www.docker.com/get-started",[25],[286],{"type":18,"value":287},"도커 홈페이지",{"type":18,"value":289},"에서 ",{"type":13,"tag":28,"props":291,"children":292},{},[293],{"type":18,"value":294},"Docker Desktop",{"type":18,"value":296},"을 다운로드 해주세요.",{"type":13,"tag":14,"props":298,"children":299},{},[300,302,307],{"type":18,"value":301},"잘 설치했다면 터미널에서 ",{"type":13,"tag":28,"props":303,"children":304},{},[305],{"type":18,"value":306},"docker",{"type":18,"value":308}," 명령어를 사용할 수 있습니다.",{"type":13,"tag":103,"props":310,"children":313},{"className":311,"code":312},[144],"$ docker -v\nDocker version 20.10.6, build 370c289\n",[314],{"type":13,"tag":112,"props":315,"children":316},{},[317],{"type":13,"tag":103,"props":318,"children":319},{"__ignoreMap":5},[320],{"type":18,"value":312},{"type":13,"tag":14,"props":322,"children":323},{},[324,326,330],{"type":18,"value":325},"자 그럼 도커를 사용하기 위해 ",{"type":13,"tag":28,"props":327,"children":328},{},[329],{"type":18,"value":275},{"type":18,"value":331}," 을 작성해야 합니다. 별 거 없습니다. 그냥 어떤 순서로 앱을 패키징할지 나열하는 것 뿐입니다.",{"type":13,"tag":14,"props":333,"children":334},{},[335,337,342],{"type":18,"value":336},"프로젝트 루트 폴더에 도커파일을 만들어주세요. (대문자 ",{"type":13,"tag":28,"props":338,"children":339},{},[340],{"type":18,"value":341},"D",{"type":18,"value":343}," 오타 아닙니다)",{"type":13,"tag":103,"props":345,"children":348},{"className":346,"code":347,"language":109,"meta":5},[106],"$ touch Dockerfile\n",[349],{"type":13,"tag":112,"props":350,"children":351},{},[352],{"type":13,"tag":103,"props":353,"children":354},{"__ignoreMap":5},[355],{"type":18,"value":347},{"type":13,"tag":14,"props":357,"children":358},{},[359],{"type":18,"value":360},"그럼 node 앱을 돌리기 위한 간단한 도커파일을 작성합니다.",{"type":13,"tag":103,"props":362,"children":366},{"className":363,"code":365,"filename":275,"language":272,"meta":5},[364],"language-dockerfile","\n# 어떤 환경에서 도커 이미지를 만들지 결정하기.\nFROM node:14-slim\n\n# 도커 컨테이너 내부의 작업 디렉토리 결정하기. 원하는 대로 정하면 됩니다.\nWORKDIR /usr/src/app\n\n# 외부 패키지 설치를 위해 package.json과 yarn.lock 파일 복사\nCOPY package.json .\nCOPY yarn.lock .\n\n# 패키지 설치\nRUN yarn\n\n# 나머지 모두 복사\nCOPY . .\n\n# 도커 컨테이너에 접근할 수 있게 포트 열어주기\nEXPOSE 3000\n\n# 앱 실행시키기\nCMD [ \"yarn\", \"dev\" ]\n",[367],{"type":13,"tag":112,"props":368,"children":369},{},[370],{"type":13,"tag":103,"props":371,"children":372},{"__ignoreMap":5},[373],{"type":18,"value":365},{"type":13,"tag":14,"props":375,"children":376},{},[377,379,385,387,392,394,399,401,406],{"type":18,"value":378},"참고로 도커 파일을 통해 패키징한 결과물을 ",{"type":13,"tag":380,"props":381,"children":382},"strong",{},[383],{"type":18,"value":384},"이미지",{"type":18,"value":386},"라고 합니다. 그리고 이 이미지를 저장하는 곳은 ",{"type":13,"tag":380,"props":388,"children":389},{},[390],{"type":18,"value":391},"레지스트리",{"type":18,"value":393}," 라고 합니다. 우리가 깃 프로젝트를 깃허브 리파지토리에 올리는 것과 비슷한 겁니다. 그래서 이 이미지들도 ",{"type":13,"tag":28,"props":395,"children":396},{},[397],{"type":18,"value":398},"Docker Hub",{"type":18,"value":400},"나 ",{"type":13,"tag":28,"props":402,"children":403},{},[404],{"type":18,"value":405},"AWS ECR",{"type":18,"value":407}," 같은 원격 레지스트리에 저장시켜서 사용합니다.",{"type":13,"tag":14,"props":409,"children":410},{},[411,413,417,419,424],{"type":18,"value":412},"아무튼 ",{"type":13,"tag":28,"props":414,"children":415},{},[416],{"type":18,"value":275},{"type":18,"value":418}," 작성에 대한 방법은, 그냥 받아들이면 됩니다. 한 가지 ",{"type":13,"tag":28,"props":420,"children":421},{},[422],{"type":18,"value":423},"COPY",{"type":18,"value":425}," 명령어가 직관적으로 이해가 안갈 수 있습니다.",{"type":13,"tag":14,"props":427,"children":428},{},[429,434],{"type":13,"tag":28,"props":430,"children":431},{},[432],{"type":18,"value":433},"COPY A B",{"type":18,"value":435}," 이런식으로 사용하면 되고, A가 내 컴퓨터 쪽, B가 도커 컨테이너 쪽입니다. A를 B로 복사한다는 뜻입니다.",{"type":13,"tag":14,"props":437,"children":438},{},[439],{"type":18,"value":440},"이제 이 도커파일을 이용해 이미지를 만들어봅시다. 터미널에 입력해주세요.",{"type":13,"tag":103,"props":442,"children":445},{"className":443,"code":444,"filename":108,"language":109,"meta":5},[106],"$ docker build . -t node_app\n\n[+] Building 11.6s (12/12) FINISHED\n => [internal] load build definition from Dockerfile                                                       0.0s\n => => transferring dockerfile: 187B                                                                       0.0s\n => [internal] load .dockerignore                                                                          0.0s\n => => transferring context: 2B                                                                            0.0s\n => [internal] load metadata for docker.io/library/node:14-slim                                            2.2s\n => [auth] library/node:pull token for registry-1.docker.io                                                0.0s\n => CACHED [1/6] FROM docker.io/library/node:14-slim@sha256:a3ff0656dfa88cc5c4092af3e18d16cbbbf50417ce4d0  0.0s\n => [internal] load build context                                                                          1.3s\n => => transferring context: 1.07MB                                                                        1.1s\n => [2/6] WORKDIR /usr/src/app                                                                             0.0s\n => [3/6] COPY package.json .                                                                              1.1s\n => [4/6] COPY yarn.lock .                                                                                 0.0s\n => [5/6] RUN yarn                                                                                         5.1s\n => [6/6] COPY . .                                                                                         0.9s\n => exporting to image                                                                                     0.9s\n => => exporting layers                                                                                    0.9s\n => => writing image sha256:33c768313fd785507812a137e90fdf97f629edd91d06851846ba416df6a62277               0.0s\n => => naming to docker.io/library/node_app                                                                0.0s\n",[446],{"type":13,"tag":112,"props":447,"children":448},{},[449],{"type":13,"tag":103,"props":450,"children":451},{"__ignoreMap":5},[452],{"type":18,"value":444},{"type":13,"tag":14,"props":454,"children":455},{},[456,458,463,465,470],{"type":18,"value":457},"한 가지 알아둘 부분은, ",{"type":13,"tag":28,"props":459,"children":460},{},[461],{"type":18,"value":462},"-t",{"type":18,"value":464}," 는 태그를 지정한다는 뜻입니다. 지정하지 않으면 이름이 ",{"type":13,"tag":28,"props":466,"children":467},{},[468],{"type":18,"value":469},"NONE",{"type":18,"value":471}," 으로 지정되면서 사용하는 데 불편하므로 태깅을 잘 해주세요.",{"type":13,"tag":14,"props":473,"children":474},{},[475],{"type":18,"value":476},"아래는 빌드된 이미지를 확인하는 방법입니다.",{"type":13,"tag":103,"props":478,"children":481},{"className":479,"code":480,"filename":108,"language":109,"meta":5},[106],"$ docker images\n\nREPOSITORY   TAG       IMAGE ID       CREATED              SIZE\nnode_app     latest    33c768313fd7   About a minute ago   382MB\n",[482],{"type":13,"tag":112,"props":483,"children":484},{},[485],{"type":13,"tag":103,"props":486,"children":487},{"__ignoreMap":5},[488],{"type":18,"value":480},{"type":13,"tag":14,"props":490,"children":491},{},[492],{"type":18,"value":493},"빌드된 이미지를 실행시켜봐야겠죠. 아래 명령어를 입력해주세요.",{"type":13,"tag":103,"props":495,"children":498},{"className":496,"code":497,"filename":108,"language":109,"meta":5},[106],"$ docker run -p 3000:3000 node_app\n\n# 이렇게 컨테이너를 여러 개 실행시킬 수도 있음. 포트 바꿔서 들어가보세요.\n$ docker run -p 3001:3000 node_app\n$ docker run -p 3002:3000 node_app\n",[499],{"type":13,"tag":112,"props":500,"children":501},{},[502],{"type":13,"tag":103,"props":503,"children":504},{"__ignoreMap":5},[505],{"type":18,"value":497},{"type":13,"tag":14,"props":507,"children":508},{},[509,511,516],{"type":18,"value":510},"브라우저를 통해 접속이 된다면 성공입니다. 이렇게 빌드된 이미지를 실행시키면, 그걸 ",{"type":13,"tag":380,"props":512,"children":513},{},[514],{"type":18,"value":515},"컨테이너",{"type":18,"value":517},"라고 부릅니다.",{"type":13,"tag":14,"props":519,"children":520},{},[521],{"type":18,"value":522},"현재 실행 중인 모든 컨테이너 목록을 보고 싶으면 아래 명령어를 입력해주세요.",{"type":13,"tag":103,"props":524,"children":527},{"className":525,"code":526,"filename":108,"language":109,"meta":5},[106],"$ docker ps -a\n\nCONTAINER ID   IMAGE      COMMAND                  CREATED          STATUS          PORTS                                       NAMES\n36f74a13d90d   node_app   \"docker-entrypoint.s…\"   12 seconds ago   Up 10 seconds   0.0.0.0:3000->3000/tcp, :::3000->3000/tcp   upbeat_blackburn\n",[528],{"type":13,"tag":112,"props":529,"children":530},{},[531],{"type":13,"tag":103,"props":532,"children":533},{"__ignoreMap":5},[534],{"type":18,"value":526},{"type":13,"tag":14,"props":536,"children":537},{},[538,540,545,547,552],{"type":18,"value":539},"쓱 한 번 보고 넘어가세요. ",{"type":13,"tag":28,"props":541,"children":542},{},[543],{"type":18,"value":544},"STATUS",{"type":18,"value":546}," 부분이 Up이라고 되어있으면 앱이 돌아간다는 뜻이니까, 컨테이너를 삭제하고 싶다면 ",{"type":13,"tag":28,"props":548,"children":549},{},[550],{"type":18,"value":551},"CONTAINER ID",{"type":18,"value":553},"를 이용해 삭제해줍시다.",{"type":13,"tag":103,"props":555,"children":558},{"className":556,"code":557,"filename":108,"language":109,"meta":5},[106],"$ docker rm -f 36f74a13d90d\n",[559],{"type":13,"tag":112,"props":560,"children":561},{},[562],{"type":13,"tag":103,"props":563,"children":564},{"__ignoreMap":5},[565],{"type":18,"value":557},{"type":13,"tag":91,"props":567,"children":569},{"id":568},"docker-compose",[570],{"type":18,"value":571},"Docker Compose",{"type":13,"tag":14,"props":573,"children":574},{},[575,577,582],{"type":18,"value":576},"지금까지 ",{"type":13,"tag":28,"props":578,"children":579},{},[580],{"type":18,"value":581},"Docker CLI",{"type":18,"value":583},"를 이용해서 이것 저것 해보았습니다만, 저는 CLI로 docker를 사용하는 것을 추천하지 않습니다. 도커 특성상 많은 옵션을 주어야 하는데 언제 일일히 치고 있나요. 명령어가 길어져서 보기 안좋습니다.",{"type":13,"tag":14,"props":585,"children":586},{},[587],{"type":18,"value":588},"그리고 지금은 이미지 1개만 띄우니까 괜찮지만, 나중에는 몇 개를 띄워야 할 지 모릅니다. 그 때 마다 일일히 이미지 하나씩 올리는 건 상당히 귀찮은 일이겠죠.",{"type":13,"tag":14,"props":590,"children":591},{},[592,594,598],{"type":18,"value":593},"그래서 여러 이미지를 한 번에 관리할 수 있게끔 개발된 게 ",{"type":13,"tag":28,"props":595,"children":596},{},[597],{"type":18,"value":571},{"type":18,"value":599}," 입니다. 바로 예제를 보도록 하죠.",{"type":13,"tag":103,"props":601,"children":607},{"className":602,"code":604,"filename":605,"language":606,"meta":5},[603],"language-yaml","version: \"3.9\"\n\nservices:\n  app: # 이미지 이름 (마음대로 설정해도 됩니다)\n    build: . # Dockerfile이 있는 경로를 넣어주기\n    ports:\n      - \"3000:3000\" # docker CLI의 \"-p 3000:3000\" 과 같은 표현\n","docker-compose.yml","yaml",[608],{"type":13,"tag":112,"props":609,"children":610},{},[611],{"type":13,"tag":103,"props":612,"children":613},{"__ignoreMap":5},[614],{"type":18,"value":604},{"type":13,"tag":14,"props":616,"children":617},{},[618,620,624,626,631],{"type":18,"value":619},"프로젝트 루트 디렉토리에 ",{"type":13,"tag":28,"props":621,"children":622},{},[623],{"type":18,"value":605},{"type":18,"value":625}," 파일을 만들어 주고 터미널에 ",{"type":13,"tag":28,"props":627,"children":628},{},[629],{"type":18,"value":630},"docker compose up",{"type":18,"value":632}," 을 입력하면 정상적으로 컨테이너가 생성되고, 로컬호스트로 접근이 가능해집니다.",{"type":13,"tag":634,"props":635,"children":636},"blockquote",{},[637],{"type":13,"tag":14,"props":638,"children":639},{},[640,642,647,649,654],{"type":18,"value":641},"docker compose CLI는 이제 docker CLI에서 제공됩니다. ",{"type":13,"tag":28,"props":643,"children":644},{},[645],{"type":18,"value":646},"docker-compose CMD",{"type":18,"value":648}," 대신 ",{"type":13,"tag":28,"props":650,"children":651},{},[652],{"type":18,"value":653},"docker compose CMD",{"type":18,"value":655}," 를 사용해주세요.",{"type":13,"tag":14,"props":657,"children":658},{},[659],{"type":18,"value":660},"그리고 여러 개의 컨테이너를 한 꺼번에 띄우고 싶다면 이런식으로 하면 됩니다.",{"type":13,"tag":103,"props":662,"children":665},{"className":663,"code":664,"filename":605,"language":606,"meta":5},[603],"version: \"3.9\"\n\nservices:\n  app1:\n    build: .\n    ports:\n      - \"3000:3000\"\n\n  app2:\n    build: .\n    ports:\n      - \"3001:3000\"\n\n  app3:\n    build: .\n    ports:\n      - \"3002:3000\"\n\n  app4:\n    build: .\n    ports:\n      - \"3003:3000\"\n",[666],{"type":13,"tag":112,"props":667,"children":668},{},[669],{"type":13,"tag":103,"props":670,"children":671},{"__ignoreMap":5},[672],{"type":18,"value":664},{"type":13,"tag":14,"props":674,"children":675},{},[676],{"type":18,"value":677},"이러고 3000 ~ 3003 포트까지 들어가보면 잘 접속됩니다.",{"type":13,"tag":14,"props":679,"children":680},{},[681,685],{"type":13,"tag":265,"props":682,"children":684},{"alt":267,"src":683},"https://user-images.githubusercontent.com/20244536/121302145-359e9600-c934-11eb-8a32-2aa5c323945a.png",[],{"type":13,"tag":686,"props":687,"children":688},"em",{},[689],{"type":18,"value":690},"이미지가 잘 안보이는데, 아무튼 4개 앱이 각자 다른 포트로 열렸다는 뜻",{"type":13,"tag":14,"props":692,"children":693},{},[694,696,701],{"type":18,"value":695},"도커 컴포즈는 일반 도커 명령어와 다르게, 터미널에서 작업을 종료하면 그대로 컨테이너들이 모두 비활성화됩니다. 백그라운드에서도 계속 실행시키고 싶다면 ",{"type":13,"tag":28,"props":697,"children":698},{},[699],{"type":18,"value":700},"docker compose up -d",{"type":18,"value":702}," 명령어를 사용해주세요.",{"type":13,"tag":14,"props":704,"children":705},{},[706,708,713],{"type":18,"value":707},"그리고 백그라운드에서 실행된 컨테이너들을 한 번에 지우려면 ",{"type":13,"tag":28,"props":709,"children":710},{},[711],{"type":18,"value":712},"docker compose down",{"type":18,"value":714},"을 하면 됩니다. (다른 디렉토리에서 하면 당연히 안됩니다..)",{"type":13,"tag":91,"props":716,"children":718},{"id":717},"프로젝트-구조-개선하기",[719],{"type":18,"value":720},"프로젝트 구조 개선하기",{"type":13,"tag":14,"props":722,"children":723},{},[724,726,730],{"type":18,"value":725},"여기까지 간단하게 ",{"type":13,"tag":28,"props":727,"children":728},{},[729],{"type":18,"value":32},{"type":18,"value":731}," 에 대해 살펴봤습니다. 근데 사실 지금 상태로 앱을 개발하고, 배포하기엔 몇 가지 문제가 있습니다.",{"type":13,"tag":14,"props":733,"children":734},{},[735,737,742],{"type":18,"value":736},"첫 번째는 ",{"type":13,"tag":380,"props":738,"children":739},{},[740],{"type":18,"value":741},"핫 리로딩",{"type":18,"value":743},"입니다. 도커 컨테이너로 개발을 하는 경우, 코드를 수정할 때 마다 개발 서버가 다시 시작되지 않습니다. 이유는 우리가 수정하는 코드는 로컬 컴퓨터의 코드지, 컨테이너 안의 코드가 아니기 때문입니다.",{"type":13,"tag":14,"props":745,"children":746},{},[747,749,754,756,761,763,767],{"type":18,"value":748},"두 번째는 ",{"type":13,"tag":380,"props":750,"children":751},{},[752],{"type":18,"value":753},"배포",{"type":18,"value":755},"입니다. 일반적으로 배포용 앱은 ",{"type":13,"tag":28,"props":757,"children":758},{},[759],{"type":18,"value":760},"webpack",{"type":18,"value":762}," 같은 번들링 도구를 이용해 코드를 변형하거나 압축시키는 작업을 하게 됩니다. 그렇게 하기 위해서는 배포용 ",{"type":13,"tag":28,"props":764,"children":765},{},[766],{"type":18,"value":275},{"type":18,"value":768}," 이 필요합니다.",{"type":13,"tag":770,"props":771,"children":773},"h3",{"id":772},"핫-리로딩-개선하기",[774],{"type":18,"value":775},"핫 리로딩 개선하기",{"type":13,"tag":14,"props":777,"children":778},{},[779,781,786],{"type":18,"value":780},"해결 방법은 간단합니다. 내 로컬 컴퓨터와 컨테이너의 ",{"type":13,"tag":380,"props":782,"children":783},{},[784],{"type":18,"value":785},"저장 공간",{"type":18,"value":787},"을 공유하면 됩니다. 로컬 코드를 수정하면 바로 컨테이너 안의 코드도 같이 수정이 되는거죠.",{"type":13,"tag":103,"props":789,"children":792},{"className":790,"code":791,"filename":605,"language":606,"meta":5},[603],"version: \"3.9\"\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - \".:/usr/src/api\" # Dockerfile의 WORKDIR와 맞추기\n      - \"/usr/src/api/node_modules\" # 핫 리로드 성능 개선\n",[793],{"type":13,"tag":112,"props":794,"children":795},{},[796],{"type":13,"tag":103,"props":797,"children":798},{"__ignoreMap":5},[799],{"type":18,"value":791},{"type":13,"tag":14,"props":801,"children":802},{},[803,805,810],{"type":18,"value":804},"이렇게 하고 ",{"type":13,"tag":28,"props":806,"children":807},{},[808],{"type":18,"value":809},"docker compose up --build",{"type":18,"value":811}," 명령어로 새로 빌드하면서 컨테이너를 띄워주고, 코드를 수정하면 바로 서버가 다시 시작하게 됩니다.",{"type":13,"tag":770,"props":813,"children":815},{"id":814},"개발용-배포용-이미지-분리하기",[816],{"type":18,"value":817},"개발용, 배포용 이미지 분리하기",{"type":13,"tag":14,"props":819,"children":820},{},[821,823,828,830,834],{"type":18,"value":822},"일단 기존 도커파일은 개발용이었으니 파일 이름을 ",{"type":13,"tag":28,"props":824,"children":825},{},[826],{"type":18,"value":827},"Dockerfile.dev",{"type":18,"value":829}," 로 변경해주고, 배포용 파일인 ",{"type":13,"tag":28,"props":831,"children":832},{},[833],{"type":18,"value":275},{"type":18,"value":835}," 을 새로 만들어주세요.",{"type":13,"tag":14,"props":837,"children":838},{},[839],{"type":18,"value":840},"배포용 도커 파일은 이렇게 작성합니다.",{"type":13,"tag":103,"props":842,"children":845},{"className":843,"code":844,"filename":275,"language":272,"meta":5},[364],"FROM node:14-slim\n\nWORKDIR /usr/src/app\n\nCOPY package.json .\nCOPY yarn.lock .\n\nRUN yarn\n\nCOPY . .\n\nRUN yarn build # 빌드하는 부분 추가\n\nEXPOSE 3000\n\nCMD [ \"yarn\", \"start\" ] # `yarn dev`에서 `yarn start`로 변경\n",[846],{"type":13,"tag":112,"props":847,"children":848},{},[849],{"type":13,"tag":103,"props":850,"children":851},{"__ignoreMap":5},[852],{"type":18,"value":844},{"type":13,"tag":14,"props":854,"children":855},{},[856,858,862,864,869],{"type":18,"value":857},"그리고 기존 ",{"type":13,"tag":28,"props":859,"children":860},{},[861],{"type":18,"value":605},{"type":18,"value":863}," 도 이름을 ",{"type":13,"tag":28,"props":865,"children":866},{},[867],{"type":18,"value":868},"docker-compose.dev.yml",{"type":18,"value":870}," 로 바꾸고, 새로운 컴포즈 파일을 만들고 아래 내용을 작성합니다.",{"type":13,"tag":103,"props":872,"children":875},{"className":873,"code":874,"filename":605,"language":606,"meta":5},[603],"version: \"3.9\"\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"80:3000\"\n",[876],{"type":13,"tag":112,"props":877,"children":878},{},[879],{"type":13,"tag":103,"props":880,"children":881},{"__ignoreMap":5},[882],{"type":18,"value":874},{"type":13,"tag":14,"props":884,"children":885},{},[886,888,893],{"type":18,"value":887},"물론 배포용 앱을 웹서버 없이 그냥 올리는 사람은 없을겁니다. ",{"type":13,"tag":28,"props":889,"children":890},{},[891],{"type":18,"value":892},"nginx",{"type":18,"value":894}," 같은 웹서버로 프록시를 해줘야 하지만, 여기서 다루면 또 내용이 비대해지기 때문에, 일단은 대충 이렇게 한다는 걸 알아두시면 되겠습니다.",{"type":13,"tag":14,"props":896,"children":897},{},[898,900,905,907,911],{"type":18,"value":899},"개발용인 ",{"type":13,"tag":28,"props":901,"children":902},{},[903],{"type":18,"value":904},"Dockerifle.dev",{"type":18,"value":906}," 와 ",{"type":13,"tag":28,"props":908,"children":909},{},[910],{"type":18,"value":868},{"type":18,"value":912}," 은 이렇게 사용하면 됩니다.",{"type":13,"tag":14,"props":914,"children":915},{},[916],{"type":18,"value":917},"도커파일은 똑같고, 컴포즈 파일은 조금 수정이 필요합니다.",{"type":13,"tag":103,"props":919,"children":922},{"className":920,"code":921,"filename":868,"language":606,"meta":5},[603],"version: \"3.9\"\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile.dev\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - \".:/usr/src/app\"\n      - \"/usr/src/app/node_modules\"\n",[923],{"type":13,"tag":112,"props":924,"children":925},{},[926],{"type":13,"tag":103,"props":927,"children":928},{"__ignoreMap":5},[929],{"type":18,"value":921},{"type":13,"tag":14,"props":931,"children":932},{},[933,938,940,944],{"type":13,"tag":28,"props":934,"children":935},{},[936],{"type":18,"value":937},"build",{"type":18,"value":939}," 부분이 조금 바뀌는데, 개발 때는 ",{"type":13,"tag":28,"props":941,"children":942},{},[943],{"type":18,"value":827},{"type":18,"value":945}," 을 읽도록 바꿔주었습니다.",{"type":13,"tag":14,"props":947,"children":948},{},[949,954,956,961],{"type":13,"tag":28,"props":950,"children":951},{},[952],{"type":18,"value":953},"CLI",{"type":18,"value":955},"로 실행할 땐 ",{"type":13,"tag":28,"props":957,"children":958},{},[959],{"type":18,"value":960},"-f",{"type":18,"value":962}," 플래그를 이용하면 됩니다.",{"type":13,"tag":103,"props":964,"children":967},{"className":965,"code":966,"filename":108,"language":109,"meta":5},[106],"$ docker compose -f docker-compose.dev.yml up --build\n",[968],{"type":13,"tag":112,"props":969,"children":970},{},[971],{"type":13,"tag":103,"props":972,"children":973},{"__ignoreMap":5},[974],{"type":18,"value":966},{"type":13,"tag":770,"props":976,"children":978},{"id":977},"참고",[979],{"type":18,"value":977},{"type":13,"tag":981,"props":982,"children":983},"ul",{},[984,995],{"type":13,"tag":985,"props":986,"children":987},"li",{},[988],{"type":13,"tag":21,"props":989,"children":992},{"href":990,"rel":991},"https://nodejs.org/ko/docs/guides/nodejs-docker-webapp/",[25],[993],{"type":18,"value":994},"Node.js 웹 앱의 도커라이징 - nodejs.org",{"type":13,"tag":985,"props":996,"children":997},{},[998],{"type":13,"tag":21,"props":999,"children":1002},{"href":1000,"rel":1001},"https://docs.docker.com/compose/compose-file/",[25],[1003],{"type":18,"value":1004},"Compose file - docs.docker.com",{"title":5,"searchDepth":1006,"depth":1006,"links":1007},2,[1008,1009,1010,1011],{"id":93,"depth":1006,"text":96},{"id":272,"depth":1006,"text":275},{"id":568,"depth":1006,"text":571},{"id":717,"depth":1006,"text":720,"children":1012},[1013,1015,1016],{"id":772,"depth":1014,"text":775},3,{"id":814,"depth":1014,"text":817},{"id":977,"depth":1014,"text":977},"markdown","content:super-easy-docker.md","content","super-easy-docker.md","md",1691494669436]