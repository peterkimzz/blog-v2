[{"data":1,"prerenderedAt":685},["Reactive",2],{"content-query-ap4n7QgS6m":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":5,"_empty":6,"title":7,"description":8,"excerpt":9,"category":35,"thumbnail":36,"updated":37,"created":38,"published":39,"body":40,"_type":680,"_id":681,"_source":682,"_file":683,"_extension":684},"/phone-validation-service-twilio-in-5-minutes","",false,"Twilio 번호 구매 없이 연락처 인증 서비스 5분만에 구현하기","이번 포스팅에선 Twilio를 이용해 Node.js에서 개인 번호를 발급받지 않고, 핸드폰 번호 인증을 매우 간단하게 구현하는 방법에 대해 소개해드리겠습니다.",{"type":10,"children":11},"root",[12],{"type":13,"tag":14,"props":15,"children":16},"element","p",{},[17,20,26,28,33],{"type":18,"value":19},"text","이번 포스팅에선 ",{"type":13,"tag":21,"props":22,"children":23},"code-inline",{},[24],{"type":18,"value":25},"Twilio",{"type":18,"value":27},"를 이용해 ",{"type":13,"tag":21,"props":29,"children":30},{},[31],{"type":18,"value":32},"Node.js",{"type":18,"value":34},"에서 개인 번호를 발급받지 않고, 핸드폰 번호 인증을 매우 간단하게 구현하는 방법에 대해 소개해드리겠습니다.","tech","https://user-images.githubusercontent.com/20244536/217119347-a66255f7-f5cd-436c-ae11-63bed3bff016.png","2023-02-19T00:00:00.000Z","2023-02-04T00:00:00.000Z",true,{"type":10,"children":41,"toc":673},[42,56,61,80,85,91,107,119,128,133,141,146,154,166,174,179,187,192,200,205,211,230,238,251,258,270,277,282,311,316,323,340,347,353,358,387,403,408,422,427,439,471,489,514,526,540,558,570,575,583,595,600,612,624,653,658,663,668],{"type":13,"tag":14,"props":43,"children":44},{},[45,46,50,51,55],{"type":18,"value":19},{"type":13,"tag":21,"props":47,"children":48},{},[49],{"type":18,"value":25},{"type":18,"value":27},{"type":13,"tag":21,"props":52,"children":53},{},[54],{"type":18,"value":32},{"type":18,"value":34},{"type":13,"tag":14,"props":57,"children":58},{},[59],{"type":18,"value":60},"온라인 서비스를 확장하다보면 개인화된 경험을 위해 반드시 인증 서비스를 구현해야합니다. 구글,카톡으로 로그인하기 같은 OAuth도 있을거고, 이메일/패스워드 로그인도 있고, 아니면 연락처만 넣고 인증할 수도 있습니다. 운영하는 서비스에 맞게끔 잘 선택하면 되겠습니다.",{"type":13,"tag":14,"props":62,"children":63},{},[64,66,71,73,78],{"type":18,"value":65},"저는 요즘 비밀번호를 수집하지 않는 것을 좋아합니다. 데이터베이스 유저 테이블에 ",{"type":13,"tag":21,"props":67,"children":68},{},[69],{"type":18,"value":70},"password",{"type":18,"value":72},", ",{"type":13,"tag":21,"props":74,"children":75},{},[76],{"type":18,"value":77},"password_salt",{"type":18,"value":79}," 같은 항목을 넣기도 싫고, 보안에 더 신경을 써야할 것만 같은 느낌이 들기 때문입니다. 어렵진 않지만 굳이 암호화 로직도 추가해야하구요.",{"type":13,"tag":14,"props":81,"children":82},{},[83],{"type":18,"value":84},"그리고 로그인 가능한 방법을 여러개 넣는 것도 좋아하지 않습니다. 구글로 로그인하기, 카톡으로 로그인하기, 이메일로 로그인하기, 연락처로 로그인하기.. 이런거 다 때려박는 서비스들이 가끔 있는데, 이러면 유저가 오랜만에 로그인하려고 하면 뭘로 했는지 기억이 안나서 로그인 시도를 여러번 해야하기 때문입니다. 일단 저부터가 뭘로 가입했었는지 기억이 안나서 중간에 앱 꺼버린 적이 생각보다 많았습니다.",{"type":13,"tag":86,"props":87,"children":89},"h2",{"id":88},"시작하기",[90],{"type":18,"value":88},{"type":13,"tag":14,"props":92,"children":93},{},[94,96,105],{"type":18,"value":95},"저희가 사용하려는 서비스는 ",{"type":13,"tag":97,"props":98,"children":102},"a",{"href":99,"rel":100},"https://www.twilio.com/verify",[101],"nofollow",[103],{"type":18,"value":104},"Twilio Verify",{"type":18,"value":106},"라는 기능입니다. 인증 1개당 $0.05입니다. 그리고 가입시 약 $15정도를 무료로 사용할 수 있도록 제공해줍니다. 한국어 번역은 지원되지 않습니다만 매우 쉽습니다.",{"type":13,"tag":14,"props":108,"children":109},{},[110,117],{"type":13,"tag":97,"props":111,"children":114},{"href":112,"rel":113},"https://www.twilio.com/try-twilio",[101],[115],{"type":18,"value":116},"회원가입 페이지",{"type":18,"value":118},"로 접속하신 뒤 가입해주세요.",{"type":13,"tag":14,"props":120,"children":121},{},[122],{"type":13,"tag":123,"props":124,"children":127},"img",{"alt":125,"src":126},"Twilio-Sign-Up","https://user-images.githubusercontent.com/20244536/216743616-6635afdd-d823-49eb-98e0-bfa6fbd7e384.png",[],{"type":13,"tag":14,"props":129,"children":130},{},[131],{"type":18,"value":132},"그 다음 입력한 이메일로 온 인증 메일을 통해 가입을 완료해주세요.",{"type":13,"tag":14,"props":134,"children":135},{},[136],{"type":13,"tag":123,"props":137,"children":140},{"alt":138,"src":139},"Twilio-Email-Received","https://user-images.githubusercontent.com/20244536/216743650-5ec01f83-e692-42a0-a503-e8d30f6b18b1.png",[],{"type":13,"tag":14,"props":142,"children":143},{},[144],{"type":18,"value":145},"이메일 안의 링크를 눌렀다면, 다음은 연락처 인증입니다. 이 기능은 저희가 곧 이용할 기능이기도 합니다.",{"type":13,"tag":14,"props":147,"children":148},{},[149],{"type":13,"tag":123,"props":150,"children":153},{"alt":151,"src":152},"Twilio-Phone-Validation","https://user-images.githubusercontent.com/20244536/216743695-2245f96a-e68b-4674-ba65-7600d787c74d.png",[],{"type":13,"tag":14,"props":155,"children":156},{},[157,159,164],{"type":18,"value":158},"연락처는 ",{"type":13,"tag":21,"props":160,"children":161},{},[162],{"type":18,"value":163},"1011112222",{"type":18,"value":165}," 처럼 맨 앞 0은 빼고 넣으셔도 됩니다.",{"type":13,"tag":14,"props":167,"children":168},{},[169],{"type":13,"tag":123,"props":170,"children":173},{"alt":171,"src":172},"Twilio-Phone-Code","https://user-images.githubusercontent.com/20244536/216743851-f0ae90ea-37d8-4f51-8bc3-0a8014923c05.PNG",[],{"type":13,"tag":14,"props":175,"children":176},{},[177],{"type":18,"value":178},"그러면 이렇게 인증 코드를 받을 수 있습니다. 근데 기존 기록을 보니 Mailchimp와 SendGrid도 Twilio를 통해 연락처 인증을 구현하고 있다는 사실을 알게 되었습니다.",{"type":13,"tag":14,"props":180,"children":181},{},[182],{"type":13,"tag":123,"props":183,"children":186},{"alt":184,"src":185},"Twilio-Registered","https://user-images.githubusercontent.com/20244536/216743955-878328c6-0630-4cdd-b12e-54c0e7e8e380.png",[],{"type":13,"tag":14,"props":188,"children":189},{},[190],{"type":18,"value":191},"가입을 완료했습니다.",{"type":13,"tag":14,"props":193,"children":194},{},[195],{"type":13,"tag":123,"props":196,"children":199},{"alt":197,"src":198},"Twilio-Required-Forms","https://user-images.githubusercontent.com/20244536/216744012-ad02f243-55da-4084-9d83-6479a43b55a0.png",[],{"type":13,"tag":14,"props":201,"children":202},{},[203],{"type":18,"value":204},"서비스 이용을 위해 필수로 작성해야하는 설문조사를 해야합니다. 아무렇게나 작성하셔도 됩니다.",{"type":13,"tag":86,"props":206,"children":208},{"id":207},"인증-시스템-구현하기",[209],{"type":18,"value":210},"인증 시스템 구현하기",{"type":13,"tag":14,"props":212,"children":213},{},[214,216,221,223,228],{"type":18,"value":215},"자 가입을 완료했으면 자동으로 대시보드로 이동하는데요, 왼쪽 메뉴 바에서 ",{"type":13,"tag":21,"props":217,"children":218},{},[219],{"type":18,"value":220},"Verify",{"type":18,"value":222}," -> ",{"type":13,"tag":21,"props":224,"children":225},{},[226],{"type":18,"value":227},"Try it out",{"type":18,"value":229}," 으로 이동합시다.",{"type":13,"tag":14,"props":231,"children":232},{},[233],{"type":13,"tag":123,"props":234,"children":237},{"alt":235,"src":236},"Twilio-Verify-Try-it-Out","https://user-images.githubusercontent.com/20244536/216744201-32283da1-d075-4b77-bde7-c707e3a177ce.png",[],{"type":13,"tag":14,"props":239,"children":240},{},[241,243,249],{"type":18,"value":242},"이 인증 서비스의 이름을 지어주세요. 이 이름은 나중에 인증 코드를 보낼 때 ",{"type":13,"tag":244,"props":245,"children":246},"strong",{},[247],{"type":18,"value":248},"서비스의 이름",{"type":18,"value":250},"으로 보여지게 됩니다. 인증 코드를 받는 유저가 헷갈리지 않도록 애플리케이션 이름과 일치시켜주시면 좋겠네요.",{"type":13,"tag":14,"props":252,"children":253},{},[254],{"type":13,"tag":123,"props":255,"children":257},{"alt":235,"src":256},"https://user-images.githubusercontent.com/20244536/216745258-594dfc3a-bdcc-4f1e-bffa-f6868948a45f.png",[],{"type":13,"tag":14,"props":259,"children":260},{},[261,263,268],{"type":18,"value":262},"서비스까지 생성하셨다면 이제 거의 다 끝났습니다. 이제 서버 측 코드에서 API를 호출하기 위한 3개의 키를 가져오면 됩니다. 일단 왼쪽 상단 ",{"type":13,"tag":21,"props":264,"children":265},{},[266],{"type":18,"value":267},"My First Twilio Account",{"type":18,"value":269},"을 눌러 콘솔 메인 화면으로 이동해주세요.",{"type":13,"tag":14,"props":271,"children":272},{},[273],{"type":13,"tag":123,"props":274,"children":276},{"alt":235,"src":275},"https://user-images.githubusercontent.com/20244536/216745698-c91d628c-45a9-4926-80a3-285ef419242b.png",[],{"type":13,"tag":14,"props":278,"children":279},{},[280],{"type":18,"value":281},"저희에게 필요한 건 3가지 키입니다.",{"type":13,"tag":283,"props":284,"children":285},"ul",{},[286,295,303],{"type":13,"tag":287,"props":288,"children":289},"li",{},[290],{"type":13,"tag":21,"props":291,"children":292},{},[293],{"type":18,"value":294},"Account SID",{"type":13,"tag":287,"props":296,"children":297},{},[298],{"type":13,"tag":21,"props":299,"children":300},{},[301],{"type":18,"value":302},"Auth Token",{"type":13,"tag":287,"props":304,"children":305},{},[306],{"type":13,"tag":21,"props":307,"children":308},{},[309],{"type":18,"value":310},"Service SID",{"type":13,"tag":14,"props":312,"children":313},{},[314],{"type":18,"value":315},"Account SID와 Auth Token은 방금 방문한 콘솔 메인화면 하단에 있습니다.",{"type":13,"tag":14,"props":317,"children":318},{},[319],{"type":13,"tag":123,"props":320,"children":322},{"alt":235,"src":321},"https://user-images.githubusercontent.com/20244536/216745760-0927d1e8-d156-4b98-be50-baf0a9b4ed68.png",[],{"type":13,"tag":14,"props":324,"children":325},{},[326,328,332,333,338],{"type":18,"value":327},"마지막 Service SID는 ",{"type":13,"tag":21,"props":329,"children":330},{},[331],{"type":18,"value":220},{"type":18,"value":222},{"type":13,"tag":21,"props":334,"children":335},{},[336],{"type":18,"value":337},"Services",{"type":18,"value":339},"에 가면 가져올 수 있습니다.",{"type":13,"tag":14,"props":341,"children":342},{},[343],{"type":13,"tag":123,"props":344,"children":346},{"alt":235,"src":345},"https://user-images.githubusercontent.com/20244536/216745796-f71f5af1-e03c-4024-9b77-6befce7f9a80.png",[],{"type":13,"tag":86,"props":348,"children":350},{"id":349},"서버측-코드-작성하기",[351],{"type":18,"value":352},"서버측 코드 작성하기",{"type":13,"tag":14,"props":354,"children":355},{},[356],{"type":18,"value":357},"코드를 작성하기 전에 먼저 필요한 npm 패키지들을 설치해주세요. 둘 다 타입스크립트 지원합니다.",{"type":13,"tag":283,"props":359,"children":360},{},[361,374],{"type":13,"tag":287,"props":362,"children":363},{},[364],{"type":13,"tag":97,"props":365,"children":368},{"href":366,"rel":367},"https://www.npmjs.com/package/twilio",[101],[369],{"type":13,"tag":21,"props":370,"children":371},{},[372],{"type":18,"value":373},"twilio",{"type":13,"tag":287,"props":375,"children":376},{},[377],{"type":13,"tag":97,"props":378,"children":381},{"href":379,"rel":380},"https://www.npmjs.com/package/phone",[101],[382],{"type":13,"tag":21,"props":383,"children":384},{},[385],{"type":18,"value":386},"phone",{"type":13,"tag":388,"props":389,"children":394},"code",{"className":390,"code":392,"language":393,"meta":5},[391],"language-bash","yarn add twilio phone\n# npm install twilio phone\n","bash",[395],{"type":13,"tag":396,"props":397,"children":398},"pre",{},[399],{"type":13,"tag":388,"props":400,"children":401},{"__ignoreMap":5},[402],{"type":18,"value":392},{"type":13,"tag":14,"props":404,"children":405},{},[406],{"type":18,"value":407},"저는 타입스크립트로 작성하겠습니다. 따로 모듈로 작성해두었구요, 이거 그냥 복붙해서 Secret 키만 바꾼다음 import 해서 사용하시면 바로 잘 작동할겁니다. 뭐 사실 너무 간단해서 코드 설명할 필요가 없습니다.",{"type":13,"tag":388,"props":409,"children":414},{"className":410,"code":412,"language":413,"meta":5},[411],"language-ts","import twilio from 'twilio'\n\nexport class Twilio {\n  private client: twilio.Twilio\n  private accountSid = 'AC9400af563ea46b42b3255f287abXXXXX'\n  private authToken = '65406c430c90d00268ef9bf0720XXXXX'\n  private verifyServiceSid = 'VAaa47973652ccaabfc582ed8c1afXXXXX'\n\n  constructor() {\n    this.client = twilio(this.accountSid, this.authToken)\n  }\n\n  sendVerificationCode(options: { to: string }) {\n    return this.client.verify.v2\n      .services(this.verifyServiceSid)\n      .verifications.create({ to: options.to, channel: 'sms' })\n  }\n  checkVerificationCode(options: { to: string; code: string }) {\n    return this.client.verify.v2\n      .services(this.verifyServiceSid)\n      .verificationChecks.create({\n        to: options.to,\n        code: options.code,\n      })\n  }\n}\n","ts",[415],{"type":13,"tag":396,"props":416,"children":417},{},[418],{"type":13,"tag":388,"props":419,"children":420},{"__ignoreMap":5},[421],{"type":18,"value":412},{"type":13,"tag":14,"props":423,"children":424},{},[425],{"type":18,"value":426},"호출은 정말 너무나 간단합니다.",{"type":13,"tag":388,"props":428,"children":431},{"className":429,"code":430,"language":413,"meta":5},[411],"import express from 'express'\nimport phone from 'phone'\nimport { Twilio } from './utils/sms'\n\nconst app = express()\napp.use(express.json())\n\napp.post('/send', async (req, res) => {\n  const body = req.body as { phone?: string }\n  if (!body.phone) {\n    throw new Error('400')\n  }\n\n  const phoneValidation = phone(body.phone, { country: 'KOR' })\n  if (!phoneValidation.isValid) {\n    throw new Error('invalid format of the phone.')\n  }\n\n  const twilio = new Twilio()\n\n  const result = await twilio.sendVerificationCode({\n    to: phoneValidation.phoneNumber,\n  })\n\n  res.json({\n    success: true,\n    data: { result },\n  })\n})\n\napp.listen(3000, () => {\n  console.log('http://localhost:3000')\n})\n",[432],{"type":13,"tag":396,"props":433,"children":434},{},[435],{"type":13,"tag":388,"props":436,"children":437},{"__ignoreMap":5},[438],{"type":18,"value":430},{"type":13,"tag":14,"props":440,"children":441},{},[442,444,448,450,455,457,462,464,469],{"type":18,"value":443},"하나 짚어둘 부분이 있는데요, ",{"type":13,"tag":21,"props":445,"children":446},{},[447],{"type":18,"value":373},{"type":18,"value":449}," 패키지에 연락처 정보를 넘길 때 항상 하이픈 없이 국가 코드를 같이 보내주어야 합니다. 예를들어 ",{"type":13,"tag":21,"props":451,"children":452},{},[453],{"type":18,"value":454},"010-1111-2222",{"type":18,"value":456}," 라는 한국 연락처가 있다고 했을 때 저 패키지 ",{"type":13,"tag":21,"props":458,"children":459},{},[460],{"type":18,"value":461},"to",{"type":18,"value":463}," 값에는 반드시 ",{"type":13,"tag":21,"props":465,"children":466},{},[467],{"type":18,"value":468},"+821011112222",{"type":18,"value":470}," 라고 넣어주어야 한다는 뜻입니다.",{"type":13,"tag":14,"props":472,"children":473},{},[474,476,481,483,487],{"type":18,"value":475},"하지만 한국에서 일반적으로 연락처를 넣을 땐 ",{"type":13,"tag":21,"props":477,"children":478},{},[479],{"type":18,"value":480},"01011112222",{"type":18,"value":482}," 이렇게 11자리만 넣는게 모든 사람에게 익숙합니다. 아무도 ",{"type":13,"tag":21,"props":484,"children":485},{},[486],{"type":18,"value":468},{"type":18,"value":488}," 이렇게 넣진 않습니다.",{"type":13,"tag":14,"props":490,"children":491},{},[492,494,498,500,505,507,512],{"type":18,"value":493},"그래서 아까 ",{"type":13,"tag":21,"props":495,"children":496},{},[497],{"type":18,"value":386},{"type":18,"value":499}," 패키지를 같이 설치한건데요, 유저가 하이픈을 넣거나 국가코드를 넣지 않더라도 반드시 twilio가 원하는 포맷으로 만들어줍니다. 아예 안맞는 포맷이면 ",{"type":13,"tag":21,"props":501,"children":502},{},[503],{"type":18,"value":504},"isValid",{"type":18,"value":506}," 가 ",{"type":13,"tag":21,"props":508,"children":509},{},[510],{"type":18,"value":511},"false",{"type":18,"value":513},"가 되면서 유저에게 미리 에러 응답을 줄 수 있겠죠.",{"type":13,"tag":14,"props":515,"children":516},{},[517,519,524],{"type":18,"value":518},"그래서 저 ",{"type":13,"tag":21,"props":520,"children":521},{},[522],{"type":18,"value":523},"sendVerificationCode",{"type":18,"value":525}," 함수에 대한 성공 응답은 이렇습니다.",{"type":13,"tag":388,"props":527,"children":532},{"className":528,"code":530,"language":531,"meta":5},[529],"language-json","{\n  \"success\": true,\n  \"data\": {\n    \"result\": {\n      \"sid\": \"VEb7fbe1cfddfb5809d5e08748816XXXXX\",\n      \"serviceSid\": \"VAaa47973652ccaabfc582ed8c1afXXXXX\",\n      \"accountSid\": \"AC9400af563ea46b42b3255f287abXXXXX\",\n      \"to\": \"+821042730000\",\n      \"channel\": \"sms\",\n      \"status\": \"pending\",\n      \"valid\": false,\n      \"lookup\": {\n        \"carrier\": null\n      },\n      \"amount\": null,\n      \"payee\": null,\n      \"sendCodeAttempts\": [\n        {\n          \"attempt_sid\": \"VLb759dde6804ba896b9cdb44748dXXXXX\",\n          \"channel\": \"sms\",\n          \"time\": \"2023-02-04T03:36:03.000Z\"\n        },\n        {\n          \"attempt_sid\": \"VL6100bc660d2e825e3b8cfaacc15XXXXX\",\n          \"channel\": \"sms\",\n          \"time\": \"2023-02-04T03:38:05.798Z\"\n        }\n      ],\n      \"dateCreated\": \"2023-02-04T03:36:03.000Z\",\n      \"dateUpdated\": \"2023-02-04T03:38:05.000Z\",\n      \"url\": \"https://verify.twilio.com/v2/Services/VAaa47973652ccaabfc582ed8c1af463ad/Verifications/VEb7fbe1cfddfb5809d5e0874881669f6a\"\n    }\n  }\n}\n","json",[533],{"type":13,"tag":396,"props":534,"children":535},{},[536],{"type":13,"tag":388,"props":537,"children":538},{"__ignoreMap":5},[539],{"type":18,"value":530},{"type":13,"tag":14,"props":541,"children":542},{},[543,545,550,552,556],{"type":18,"value":544},"주목할 부분은 ",{"type":13,"tag":21,"props":546,"children":547},{},[548],{"type":18,"value":549},"data.result.valid",{"type":18,"value":551}," 값이 아직 인증 전이라 ",{"type":13,"tag":21,"props":553,"children":554},{},[555],{"type":18,"value":511},{"type":18,"value":557}," 라는 것 말고는 없습니다.",{"type":13,"tag":14,"props":559,"children":560},{},[561,563,568],{"type":18,"value":562},"아 그리고 ",{"type":13,"tag":21,"props":564,"children":565},{},[566],{"type":18,"value":567},"data.result.sendCodeAttempts",{"type":18,"value":569}," 부분을 보니 같은 번호에 대해 기록을 쌓아주는 것 같으니 너무 자주 요청을 보내지 못하도록 저 항목을 비교해서 좀 이따가 다시 시도하라는 응답을 우리 서버가 주도록 구현할 수도 있겠네요. 근데 구현하지 않더라도 아마 Twilio 내부적으로 자주 보내지 못하도록 Rate Limit이 있기는 할겁니다.",{"type":13,"tag":14,"props":571,"children":572},{},[573],{"type":18,"value":574},"어쨌든 성공 응답을 받는다면 입력받은 연락처로 6자리 인증 코드가 발송됩니다.",{"type":13,"tag":14,"props":576,"children":577},{},[578],{"type":13,"tag":123,"props":579,"children":582},{"alt":580,"src":581},"ㅁ","https://user-images.githubusercontent.com/20244536/216746989-ff7f664f-85ff-461b-af5e-906e405d9a13.jpeg",[],{"type":13,"tag":14,"props":584,"children":585},{},[586,588,593],{"type":18,"value":587},"아까 이야기했던 것 처럼 인증 코드를 보냈을 때 미리 지정해주었던 서비스 이름인 ",{"type":13,"tag":21,"props":589,"children":590},{},[591],{"type":18,"value":592},"Phone Validation Code",{"type":18,"value":594}," 가 잘 표시됩니다.",{"type":13,"tag":14,"props":596,"children":597},{},[598],{"type":18,"value":599},"인증 쪽 코드도 똑같습니다. 연락처랑 코드 넣어주면 됩니다.",{"type":13,"tag":388,"props":601,"children":604},{"className":602,"code":603,"language":413,"meta":5},[411],"app.post('/verify', async (req, res) => {\n  const body = req.body as { phone?: string; code?: string }\n  if (!body.phone || !body.code) {\n    throw new Error('400')\n  }\n\n  const phoneValidation = phone(body.phone, { country: 'KOR' })\n  if (!phoneValidation.isValid) {\n    throw new Error('invalid format of the phone.')\n  }\n\n  const twilio = new Twilio()\n\n  const result = await twilio.checkVerificationCode({\n    to: phoneValidation.phoneNumber,\n    code: body.code,\n  })\n\n  res.json({\n    success: true,\n    data: { result },\n  })\n})\n",[605],{"type":13,"tag":396,"props":606,"children":607},{},[608],{"type":13,"tag":388,"props":609,"children":610},{"__ignoreMap":5},[611],{"type":18,"value":603},{"type":13,"tag":388,"props":613,"children":616},{"className":614,"code":615,"language":531,"meta":5},[529],"{\n  \"success\": true,\n  \"data\": {\n    \"result\": {\n      \"sid\": \"VEb7fbe1cfddfb5809d5e08748816XXXXX\",\n      \"serviceSid\": \"VAaa47973652ccaabfc582ed8c1afXXXXX\",\n      \"accountSid\": \"AC9400af563ea46b42b3255f287abXXXXX\",\n      \"to\": \"+821042730000\",\n      \"channel\": \"sms\",\n      \"status\": \"approved\",\n      \"valid\": true,\n      \"amount\": null,\n      \"payee\": null,\n      \"dateCreated\": \"2023-02-04T03:36:03.000Z\",\n      \"dateUpdated\": \"2023-02-04T03:39:00.000Z\"\n    }\n  }\n}\n",[617],{"type":13,"tag":396,"props":618,"children":619},{},[620],{"type":13,"tag":388,"props":621,"children":622},{"__ignoreMap":5},[623],{"type":18,"value":615},{"type":13,"tag":14,"props":625,"children":626},{},[627,632,634,639,640,645,646,651],{"type":13,"tag":21,"props":628,"children":629},{},[630],{"type":18,"value":631},"data.valid",{"type":18,"value":633},"는 ",{"type":13,"tag":21,"props":635,"children":636},{},[637],{"type":18,"value":638},"true",{"type":18,"value":72},{"type":13,"tag":21,"props":641,"children":642},{},[643],{"type":18,"value":644},"data.status",{"type":18,"value":633},{"type":13,"tag":21,"props":647,"children":648},{},[649],{"type":18,"value":650},"approved",{"type":18,"value":652},"가 되면서 인증은 끝이 납니다. 직접 운영하시는 데이터베이스가 있다면 성공 요청 이후에 해당 유저 레코드를 업데이트 해주면 되겠네요.",{"type":13,"tag":86,"props":654,"children":656},{"id":655},"마무리",[657],{"type":18,"value":655},{"type":13,"tag":14,"props":659,"children":660},{},[661],{"type":18,"value":662},"외부 서비스를 이용하다보니 사진이 많았는데 사전 작업과 코드 정말 뭐 별거 없습니다. 키 받아와서 API 2개 사용한 거 그게 전부입니다.",{"type":13,"tag":14,"props":664,"children":665},{},[666],{"type":18,"value":667},"이제 비밀번호 수집 없이 연락처만 받고 최대한 가볍게 인증을 구현하는 것도 가능하겠죠?",{"type":13,"tag":14,"props":669,"children":670},{},[671],{"type":18,"value":672},"우리 모두 인증 때문에 스트레스 받지 맙시다.",{"title":5,"searchDepth":674,"depth":674,"links":675},2,[676,677,678,679],{"id":88,"depth":674,"text":88},{"id":207,"depth":674,"text":210},{"id":349,"depth":674,"text":352},{"id":655,"depth":674,"text":655},"markdown","content:phone-validation-service-twilio-in-5-minutes.md","content","phone-validation-service-twilio-in-5-minutes.md","md",1691494669431]