[{"data":1,"prerenderedAt":1051},["Reactive",2],{"content-query-pA3uk7PvjK":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":5,"_empty":6,"title":7,"description":8,"excerpt":9,"category":54,"thumbnail":55,"updated":56,"created":56,"published":57,"body":58,"_type":1046,"_id":1047,"_source":1048,"_file":1049,"_extension":1050},"/rollupjs-using-plugin","",false,"Rollup.js - 플러그인으로 완성도를 높이다","지난 포스팅에서 rollup.js 를 이용해 두 개의 자바스크립트 파일을 하나로 묶고, rollup.config.js 파일을 구성해서 CLI가 아닌 스크립트로 설정 파일을 관리하는 것 까지 진행했습니다.",{"type":10,"children":11},"root",[12,35],{"type":13,"tag":14,"props":15,"children":16},"element","p",{},[17,20,26,28,33],{"type":18,"value":19},"text","지난 포스팅에서 ",{"type":13,"tag":21,"props":22,"children":23},"code-inline",{},[24],{"type":18,"value":25},"rollup.js",{"type":18,"value":27}," 를 이용해 두 개의 자바스크립트 파일을 하나로 묶고, ",{"type":13,"tag":21,"props":29,"children":30},{},[31],{"type":18,"value":32},"rollup.config.js",{"type":18,"value":34}," 파일을 구성해서 CLI가 아닌 스크립트로 설정 파일을 관리하는 것 까지 진행했습니다.",{"type":13,"tag":14,"props":36,"children":37},{},[38,40,45,47,52],{"type":18,"value":39},"이번 시간에는 ",{"type":13,"tag":21,"props":41,"children":42},{},[43],{"type":18,"value":44},"rollup",{"type":18,"value":46}," 에 날개를 달아줄 플러그인들을 살펴보고 나아가 요즘 핫한 ",{"type":13,"tag":21,"props":48,"children":49},{},[50],{"type":18,"value":51},"typescript",{"type":18,"value":53}," 까지 적용해보도록 하겠습니다.","tech","https://user-images.githubusercontent.com/20244536/107738247-a4cef980-6d49-11eb-88a5-f7b8b6190a61.png","2021-02-12T00:00:00.000Z",true,{"type":10,"children":59,"toc":1038},[60,74,88,95,100,116,135,161,172,183,222,227,232,246,251,257,295,306,311,324,329,341,359,371,376,388,414,437,461,473,478,490,495,507,512,535,553,571,582,587,598,603,615,631,650,662,679,693,698,723,728,733,745,756,768,773,785,809,827,839,844,849,873,903,924,936,946,952,957,969,974,986,1004,1009,1014,1019],{"type":13,"tag":14,"props":61,"children":62},{},[63,64,68,69,73],{"type":18,"value":19},{"type":13,"tag":21,"props":65,"children":66},{},[67],{"type":18,"value":25},{"type":18,"value":27},{"type":13,"tag":21,"props":70,"children":71},{},[72],{"type":18,"value":32},{"type":18,"value":34},{"type":13,"tag":14,"props":75,"children":76},{},[77,78,82,83,87],{"type":18,"value":39},{"type":13,"tag":21,"props":79,"children":80},{},[81],{"type":18,"value":44},{"type":18,"value":46},{"type":13,"tag":21,"props":84,"children":85},{},[86],{"type":18,"value":51},{"type":18,"value":53},{"type":13,"tag":89,"props":90,"children":92},"h2",{"id":91},"들어가기-전에",[93],{"type":18,"value":94},"들어가기 전에",{"type":13,"tag":14,"props":96,"children":97},{},[98],{"type":18,"value":99},"사실 이전에 구성했던 프로젝트가 번들링이 잘 되고는 있었지만, 빌드 시에 경고 메세지가 출력되고 있었습니다.",{"type":13,"tag":101,"props":102,"children":107},"code",{"className":103,"code":105,"language":106,"meta":5},[104],"language-bash","$ yarn build\n\n(!) Unresolved dependencies\nhttps://rollupjs.org/guide/en/#warning-treating-module-as-external-dependency\nfaker (imported by src/faker.js)\n","bash",[108],{"type":13,"tag":109,"props":110,"children":111},"pre",{},[112],{"type":13,"tag":101,"props":113,"children":114},{"__ignoreMap":5},[115],{"type":18,"value":105},{"type":13,"tag":14,"props":117,"children":118},{},[119,121,126,128,133],{"type":18,"value":120},"해석하자면 우리의 ",{"type":13,"tag":21,"props":122,"children":123},{},[124],{"type":18,"value":125},"src/faker.js",{"type":18,"value":127}," 파일에서 가져온 ",{"type":13,"tag":21,"props":129,"children":130},{},[131],{"type":18,"value":132},"faker",{"type":18,"value":134}," 모듈에 대한 처리가 잘 되지 않았다는 얘기네요.",{"type":13,"tag":14,"props":136,"children":137},{},[138,140,152,154,159],{"type":18,"value":139},"지난 포스팅에 ",{"type":13,"tag":141,"props":142,"children":146},"a",{"href":143,"rel":144},"https://webpack.js.org/guides/tree-shaking/",[145],"nofollow",[147],{"type":13,"tag":21,"props":148,"children":149},{},[150],{"type":18,"value":151},"Tree shaking",{"type":18,"value":153},"에 대해 언급했었는데, ",{"type":13,"tag":21,"props":155,"children":156},{},[157],{"type":18,"value":158},"main.js",{"type":18,"value":160}," 에서 다른 모듈을 가져올 때 실제로 사용되는 함수만 번들링의 결과물에 포함시킨다는 내용이었습니다.",{"type":13,"tag":14,"props":162,"children":163},{},[164,166,170],{"type":18,"value":165},"여기서 추가적으로 ",{"type":13,"tag":21,"props":167,"children":168},{},[169],{"type":18,"value":44},{"type":18,"value":171},"은 우리가 직접 작성한 모듈 말고, relative path를 가리키는 외부 모듈을 가져올 때 우리의 번들링 결과물에 포함시키지 않고, 단순히 가리키기만 합니다.",{"type":13,"tag":14,"props":173,"children":174},{},[175,177,181],{"type":18,"value":176},"즉 우리가 만든 이 프로젝트를 누군가 가져다 쓸 때는 ",{"type":13,"tag":21,"props":178,"children":179},{},[180],{"type":18,"value":132},{"type":18,"value":182}," 라는 모듈 없이 작동이 안된다는 뜻입니다. 당연한 얘기죠.",{"type":13,"tag":14,"props":184,"children":185},{},[186,188,192,194,199,201,206,208,213,215,220],{"type":18,"value":187},"사실 이 부분은 우리가 만든 패키지를 npm에 배포할 때 ",{"type":13,"tag":21,"props":189,"children":190},{},[191],{"type":18,"value":132},{"type":18,"value":193}," 모듈을 ",{"type":13,"tag":21,"props":195,"children":196},{},[197],{"type":18,"value":198},"devDepenency",{"type":18,"value":200},"가 아닌 ",{"type":13,"tag":21,"props":202,"children":203},{},[204],{"type":18,"value":205},"depenency",{"type":18,"value":207},"에 설치해두면 가져다 쓰는 사람이 우리 패키지를 설치할 때 직접 ",{"type":13,"tag":21,"props":209,"children":210},{},[211],{"type":18,"value":212},"yarn add faker",{"type":18,"value":214}," 를 하지 않더라도 알아서 같이 ",{"type":13,"tag":21,"props":216,"children":217},{},[218],{"type":18,"value":219},"node_modules",{"type":18,"value":221}," 안에 설치가 됩니다.",{"type":13,"tag":14,"props":223,"children":224},{},[225],{"type":18,"value":226},"결과적으로 현재 발생하는 경고 메세지를 무시해도 괜찮지만, 공식 문서에는 이 부분이 의도적이더라도 명시해주면 좋겠다고 기술하고 있습니다.",{"type":13,"tag":14,"props":228,"children":229},{},[230],{"type":18,"value":231},"경고 메세지를 없애는 방법은 간단합니다.",{"type":13,"tag":101,"props":233,"children":238},{"className":234,"code":236,"filename":32,"language":237,"meta":5},[235],"language-js","export default {\n  input: 'src/main.js',\n  output: {\n    dir: 'dist',\n    format: 'cjs'\n  }\n  external: [ 'faker' ]\n};\n","js",[239],{"type":13,"tag":109,"props":240,"children":241},{},[242],{"type":13,"tag":101,"props":243,"children":244},{"__ignoreMap":5},[245],{"type":18,"value":236},{"type":13,"tag":14,"props":247,"children":248},{},[249],{"type":18,"value":250},"외부 모듈에 대해 직접 이름을 명시하면 더 이상 오류 메세지는 출력되지 않습니다.",{"type":13,"tag":89,"props":252,"children":254},{"id":253},"외부-모듈도-포함시키고-싶다면",[255],{"type":18,"value":256},"외부 모듈도 포함시키고 싶다면?",{"type":13,"tag":14,"props":258,"children":259},{},[260,262,266,268,273,275,279,281,285,287,293],{"type":18,"value":261},"어떻게 보면 우리 프로젝트에서는 ",{"type":13,"tag":21,"props":263,"children":264},{},[265],{"type":18,"value":132},{"type":18,"value":267}," 의 ",{"type":13,"tag":21,"props":269,"children":270},{},[271],{"type":18,"value":272},"faker.name.findName()",{"type":18,"value":274}," 함수를 제외하면 아무것도 사용하지 않기 때문에 우리 모듈을 가져다 쓰는 사람이 ",{"type":13,"tag":21,"props":276,"children":277},{},[278],{"type":18,"value":132},{"type":18,"value":280}," 모듈을 전부 설치하는 게 좀 낭비같기도 합니다. 현재 ",{"type":13,"tag":21,"props":282,"children":283},{},[284],{"type":18,"value":132},{"type":18,"value":286},"는 ",{"type":13,"tag":288,"props":289,"children":290},"strong",{},[291],{"type":18,"value":292},"41MB",{"type":18,"value":294},"나 되거든요.",{"type":13,"tag":14,"props":296,"children":297},{},[298,300,304],{"type":18,"value":299},"그렇다면 외부 모듈에 대해서도 ",{"type":13,"tag":21,"props":301,"children":302},{},[303],{"type":18,"value":151},{"type":18,"value":305},"을 이용하면 크기를 많이 줄일 수 있겠다는 생각이 드네요.",{"type":13,"tag":14,"props":307,"children":308},{},[309],{"type":18,"value":310},"고맙게도 그런 역할을 하는 플러그인이 제공되고 있어서 아주 쉽게 구현할 수 있습니다.",{"type":13,"tag":101,"props":312,"children":316},{"className":313,"code":315},[314],"language-undefined","$ yarn add -D @rollup/plugin-node-resolve\n",[317],{"type":13,"tag":109,"props":318,"children":319},{},[320],{"type":13,"tag":101,"props":321,"children":322},{"__ignoreMap":5},[323],{"type":18,"value":315},{"type":13,"tag":14,"props":325,"children":326},{},[327],{"type":18,"value":328},"프로젝트에 플러그인 역할을 할 패키지를 설치 후, 설정 파일을 수정합시다.",{"type":13,"tag":101,"props":330,"children":333},{"className":331,"code":332,"filename":32,"language":237,"meta":5},[235],"import { nodeResolve } from '@rollup/plugin-node-resolve'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    dir: 'dist',\n    format: 'cjs'\n  },\n  plugins: [nodeResolve()]\n}\n",[334],{"type":13,"tag":109,"props":335,"children":336},{},[337],{"type":13,"tag":101,"props":338,"children":339},{"__ignoreMap":5},[340],{"type":18,"value":332},{"type":13,"tag":14,"props":342,"children":343},{},[344,346,350,352,357],{"type":18,"value":345},"이렇게 설정하고 번들링을 하면 예상되는 결과는 우리의 결과물에 ",{"type":13,"tag":21,"props":347,"children":348},{},[349],{"type":18,"value":132},{"type":18,"value":351},"의 ",{"type":13,"tag":21,"props":353,"children":354},{},[355],{"type":18,"value":356},"findName()",{"type":18,"value":358}," 함수에 대한 코드가 포함되어 있어야겠죠.",{"type":13,"tag":101,"props":360,"children":363},{"className":361,"code":362,"language":106,"meta":5},[104],"$ yarn build\n\n[!] Error: 'default' is not exported by node_modules/faker/index.js, imported by src/faker.js\nhttps://rollupjs.org/guide/en/#error-name-is-not-exported-by-module\nsrc/faker.js (1:7)\n1: import faker from 'faker'\n          ^\n",[364],{"type":13,"tag":109,"props":365,"children":366},{},[367],{"type":13,"tag":101,"props":368,"children":369},{"__ignoreMap":5},[370],{"type":18,"value":362},{"type":13,"tag":14,"props":372,"children":373},{},[374],{"type":18,"value":375},"오류가 발생했습니다. 이번엔 번들링 자체가 되지 않고 있습니다..",{"type":13,"tag":14,"props":377,"children":378},{},[379,381,386],{"type":18,"value":380},"문서에서는 이러한 문제는 ",{"type":13,"tag":21,"props":382,"children":383},{},[384],{"type":18,"value":385},"CommonJS",{"type":18,"value":387}," 로 작성된 모듈들을 번들링 결과물에 포함시키려고 할 때 문제가 발생한다고 설명합니다.",{"type":13,"tag":14,"props":389,"children":390},{},[391,393,398,400,405,407,412],{"type":18,"value":392},"당연하게도 우리가 어떤 파일에서 ",{"type":13,"tag":21,"props":394,"children":395},{},[396],{"type":18,"value":397},"import a from './a.js'",{"type":18,"value":399}," 라고 가져올 수 있는 건, ",{"type":13,"tag":21,"props":401,"children":402},{},[403],{"type":18,"value":404},"a.js",{"type":18,"value":406}," 파일에는 ",{"type":13,"tag":21,"props":408,"children":409},{},[410],{"type":18,"value":411},"export default",{"type":18,"value":413}," 이 있기 때문에 가능한 시나리오입니다.",{"type":13,"tag":14,"props":415,"children":416},{},[417,419,423,425,429,431,435],{"type":18,"value":418},"하지만 ",{"type":13,"tag":21,"props":420,"children":421},{},[422],{"type":18,"value":132},{"type":18,"value":424}," 모듈을 살펴보면 그런 부분이 없습니다. 사실 ",{"type":13,"tag":21,"props":426,"children":427},{},[428],{"type":18,"value":132},{"type":18,"value":430}," 뿐만 아니라 엄청나게 많은 모듈들이 ",{"type":13,"tag":21,"props":432,"children":433},{},[434],{"type":18,"value":132},{"type":18,"value":436}," 와 같은 포맷으로 작성되어 있습니다.",{"type":13,"tag":14,"props":438,"children":439},{},[440,442,446,448,453,455,459],{"type":18,"value":441},"그래서 여기서 또 다른 플러그인 하나가 등장합니다. ",{"type":13,"tag":21,"props":443,"children":444},{},[445],{"type":18,"value":385},{"type":18,"value":447}," 로 작성된 모듈들을 ",{"type":13,"tag":21,"props":449,"children":450},{},[451],{"type":18,"value":452},"ES6",{"type":18,"value":454}," 바꾸어서 ",{"type":13,"tag":21,"props":456,"children":457},{},[458],{"type":18,"value":44},{"type":18,"value":460},"이 해석할 수 있게 도와줍니다.",{"type":13,"tag":101,"props":462,"children":465},{"className":463,"code":464},[314],"$ yarn add -D @rollup/plugin-commonjs\n",[466],{"type":13,"tag":109,"props":467,"children":468},{},[469],{"type":13,"tag":101,"props":470,"children":471},{"__ignoreMap":5},[472],{"type":18,"value":464},{"type":13,"tag":14,"props":474,"children":475},{},[476],{"type":18,"value":477},"패키지를 설치하고 설정 파일을 다시 수정합시다.",{"type":13,"tag":101,"props":479,"children":482},{"className":480,"code":481,"filename":32,"language":237,"meta":5},[235],"import { nodeResolve } from '@rollup/plugin-node-resolve'\nimport commonjs from '@rollup/plugin-commonjs'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    dir: 'dist',\n    format: 'cjs'\n  },\n  plugins: [nodeResolve(), commonjs()]\n}\n",[483],{"type":13,"tag":109,"props":484,"children":485},{},[486],{"type":13,"tag":101,"props":487,"children":488},{"__ignoreMap":5},[489],{"type":18,"value":481},{"type":13,"tag":14,"props":491,"children":492},{},[493],{"type":18,"value":494},"다시 빌드 해봅시다.",{"type":13,"tag":101,"props":496,"children":499},{"className":497,"code":498,"language":106,"meta":5},[104],"$ yarn build\n\ncreated dist in 5.2s\n✨  Done in 5.84s.\n",[500],{"type":13,"tag":109,"props":501,"children":502},{},[503],{"type":13,"tag":101,"props":504,"children":505},{"__ignoreMap":5},[506],{"type":18,"value":498},{"type":13,"tag":14,"props":508,"children":509},{},[510],{"type":18,"value":511},"빌드 타임은 좀 많이 늘어났습니다. 그래도 빠른 편입니다.",{"type":13,"tag":14,"props":513,"children":514},{},[515,517,521,523,527,529,533],{"type":18,"value":516},"번들링 결과물이 길어서 첨부하지는 못하지만, ",{"type":13,"tag":21,"props":518,"children":519},{},[520],{"type":18,"value":132},{"type":18,"value":522}," 의 코드들이 번들링 결과물에 추가되어있는 걸 볼 수 있습니다. 아마 ",{"type":13,"tag":21,"props":524,"children":525},{},[526],{"type":18,"value":132},{"type":18,"value":528}," 내부에서 ",{"type":13,"tag":21,"props":530,"children":531},{},[532],{"type":18,"value":356},{"type":18,"value":534}," 을 구현할 때 많은 단계를 거치는 것 같습니다.",{"type":13,"tag":14,"props":536,"children":537},{},[538,540,544,546,551],{"type":18,"value":539},"그래도 우리의 ",{"type":13,"tag":21,"props":541,"children":542},{},[543],{"type":18,"value":158},{"type":18,"value":545}," 파일의 크기는 현재 ",{"type":13,"tag":288,"props":547,"children":548},{},[549],{"type":18,"value":550},"1.8MB",{"type":18,"value":552},"입니다. 우리 코드를 제외하더라도 거의 40MB가량 이득을 봤습니다.",{"type":13,"tag":14,"props":554,"children":555},{},[556,558,563,565,569],{"type":18,"value":557},"심지어 이 파일만 바깥으로 빼서 ",{"type":13,"tag":21,"props":559,"children":560},{},[561],{"type":18,"value":562},"node main.js",{"type":18,"value":564}," 로 실행시켜보면 다른 ",{"type":13,"tag":21,"props":566,"children":567},{},[568],{"type":18,"value":219},{"type":18,"value":570}," 이 없더라도 잘 실행됩니다. 필요한 부분이 전부 파일 안에 포함되었으니까요. 의존성이 없어지면서 파일 크기도 엄청나게 줄였습니다.",{"type":13,"tag":14,"props":572,"children":573},{},[574,576,580],{"type":18,"value":575},"이제 사용자가 불필요하게 ",{"type":13,"tag":21,"props":577,"children":578},{},[579],{"type":18,"value":132},{"type":18,"value":581}," 모듈을 설치하지 않아도 되겠습니다.",{"type":13,"tag":89,"props":583,"children":585},{"id":584},"타입스크립트",[586],{"type":18,"value":584},{"type":13,"tag":14,"props":588,"children":589},{},[590,592,596],{"type":18,"value":591},"이제는 타입스크립트가 거의 대세가 된 것 같습니다. 저 역시 타입스크립트를 도입하고 그 필요성을 절실히 느끼고 있기 때문에, ",{"type":13,"tag":21,"props":593,"children":594},{},[595],{"type":18,"value":51},{"type":18,"value":597},"로 작성되어있지 않은 패키지를 설치할 때는 조금 꺼려지게 되더군요.",{"type":13,"tag":14,"props":599,"children":600},{},[601],{"type":18,"value":602},"먼저 우리 프로젝트에서 typescript를 사용하기 위해 패키지를 설치하도록 합시다.",{"type":13,"tag":101,"props":604,"children":607},{"className":605,"code":606,"language":106,"meta":5},[104],"$ yarn add -D typescript tslib\n",[608],{"type":13,"tag":109,"props":609,"children":610},{},[611],{"type":13,"tag":101,"props":612,"children":613},{"__ignoreMap":5},[614],{"type":18,"value":606},{"type":13,"tag":14,"props":616,"children":617},{},[618,623,625,629],{"type":13,"tag":21,"props":619,"children":620},{},[621],{"type":18,"value":622},"tslib",{"type":18,"value":624}," 의 경우 ",{"type":13,"tag":21,"props":626,"children":627},{},[628],{"type":18,"value":44},{"type":18,"value":630}," 이 typescript를 번들링할 때 필요해서 같이 설치해야합니다.",{"type":13,"tag":14,"props":632,"children":633},{},[634,636,641,643,648],{"type":18,"value":635},"타입스크립트를 사용하기 위해 ",{"type":13,"tag":21,"props":637,"children":638},{},[639],{"type":18,"value":640},"tsconfig.json",{"type":18,"value":642}," 파일을 만들어줍시다. 만드는 방법은 간단합니다. 타입스크립트를 설치하면 사용 가능한 CLI인 ",{"type":13,"tag":21,"props":644,"children":645},{},[646],{"type":18,"value":647},"tsc",{"type":18,"value":649}," 명령어를 이용하면 템플릿을 자동으로 만들 수 있습니다.",{"type":13,"tag":101,"props":651,"children":654},{"className":652,"code":653,"language":106,"meta":5},[104],"$ node_modules/.bin/tsc --init\n",[655],{"type":13,"tag":109,"props":656,"children":657},{},[658],{"type":13,"tag":101,"props":659,"children":660},{"__ignoreMap":5},[661],{"type":18,"value":653},{"type":13,"tag":14,"props":663,"children":664},{},[665,667,671,673,677],{"type":18,"value":666},"이번에도 역시 typescript를 전역으로 설치하지 않고 로컬에 설치했기 때문에, CLI를 사용하고 싶다면 프로젝트 루트 디렉토리에서 ",{"type":13,"tag":21,"props":668,"children":669},{},[670],{"type":18,"value":219},{"type":18,"value":672},"에 들어있는 ",{"type":13,"tag":21,"props":674,"children":675},{},[676],{"type":18,"value":647},{"type":18,"value":678}," 를 직접 사용하면 되겠습니다.",{"type":13,"tag":101,"props":680,"children":685},{"className":681,"code":683,"filename":640,"language":684,"meta":5},[682],"language-json","{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"CommonJS\",\n    \"strict\": true,\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}\n","json",[686],{"type":13,"tag":109,"props":687,"children":688},{},[689],{"type":13,"tag":101,"props":690,"children":691},{"__ignoreMap":5},[692],{"type":18,"value":683},{"type":13,"tag":14,"props":694,"children":695},{},[696],{"type":18,"value":697},"저는 이정도로 간단하게만 사용하겠습니다.",{"type":13,"tag":14,"props":699,"children":700},{},[701,703,707,709,714,716,721],{"type":18,"value":702},"타입스크립트를 사용하기 위한 준비가 되었으니 ",{"type":13,"tag":21,"props":704,"children":705},{},[706],{"type":18,"value":158},{"type":18,"value":708}," 와 ",{"type":13,"tag":21,"props":710,"children":711},{},[712],{"type":18,"value":713},"faker.js",{"type":18,"value":715}," 의 확장자를 ",{"type":13,"tag":21,"props":717,"children":718},{},[719],{"type":18,"value":720},".ts",{"type":18,"value":722},"로 바꿔주시면 되겠습니다.",{"type":13,"tag":14,"props":724,"children":725},{},[726],{"type":18,"value":727},"이전에 js로 작성했던 파일의 확장자를 ts로 바꾸어도 변경할 부분은 없을 것 같습니다.",{"type":13,"tag":14,"props":729,"children":730},{},[731],{"type":18,"value":732},"이제 우리 프로젝트의 구조는 이러합니다.",{"type":13,"tag":101,"props":734,"children":737},{"className":735,"code":736},[314],"project/\n|- node_modules\n|- src\n  |- faker.ts\n  |- main.ts\n|- package.json\n|- rollup.config.js\n|- tsconfig.json\n|- yarn.lock\n",[738],{"type":13,"tag":109,"props":739,"children":740},{},[741],{"type":13,"tag":101,"props":742,"children":743},{"__ignoreMap":5},[744],{"type":18,"value":736},{"type":13,"tag":14,"props":746,"children":747},{},[748,750,754],{"type":18,"value":749},"이제 ",{"type":13,"tag":21,"props":751,"children":752},{},[753],{"type":18,"value":44},{"type":18,"value":755}," 이 typescript 파일을 읽어서 번들링을 할 수 있도록 도와주는 패키지를 설치합시다.",{"type":13,"tag":101,"props":757,"children":760},{"className":758,"code":759,"language":106,"meta":5},[104],"$ yarn add -D @rollup/plugin-typescript\n",[761],{"type":13,"tag":109,"props":762,"children":763},{},[764],{"type":13,"tag":101,"props":765,"children":766},{"__ignoreMap":5},[767],{"type":18,"value":759},{"type":13,"tag":14,"props":769,"children":770},{},[771],{"type":18,"value":772},"다음 설정 파일을 수정합시다.",{"type":13,"tag":101,"props":774,"children":777},{"className":775,"code":776,"filename":32,"language":237,"meta":5},[235],"import { nodeResolve } from '@rollup/plugin-node-resolve'\nimport commonjs from '@rollup/plugin-commonjs'\nimport typescript from '@rollup/plugin-typescript'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    dir: 'dist',\n    format: 'cjs'\n  },\n  plugins: [\n    nodeResolve(),\n    commonjs({ extensions: ['.js', '.ts'] }),\n    typescript()\n  ]\n}\n",[778],{"type":13,"tag":109,"props":779,"children":780},{},[781],{"type":13,"tag":101,"props":782,"children":783},{"__ignoreMap":5},[784],{"type":18,"value":776},{"type":13,"tag":14,"props":786,"children":787},{},[788,790,794,796,801,803,807],{"type":18,"value":789},"플러그인에 ",{"type":13,"tag":21,"props":791,"children":792},{},[793],{"type":18,"value":51},{"type":18,"value":795}," 를 추가하고, ",{"type":13,"tag":21,"props":797,"children":798},{},[799],{"type":18,"value":800},"commonjs",{"type":18,"value":802},"가 ",{"type":13,"tag":21,"props":804,"children":805},{},[806],{"type":18,"value":720},{"type":18,"value":808}," 파일도 읽어들일 수 있도록 설정합니다.",{"type":13,"tag":14,"props":810,"children":811},{},[812,814,819,821,825],{"type":18,"value":813},"이 ",{"type":13,"tag":21,"props":815,"children":816},{},[817],{"type":18,"value":818},"typescript()",{"type":18,"value":820}," 플러그인 안에 타입스크립트에 대한 옵션을 넣어줄 수도 있지만, 없다면 자동으로 프로젝트 루트 디렉토리에 있는 ",{"type":13,"tag":21,"props":822,"children":823},{},[824],{"type":18,"value":640},{"type":18,"value":826}," 파일을 찾아서 동기화를 해줍니다. 정말 간편하네요.",{"type":13,"tag":101,"props":828,"children":831},{"className":829,"code":830,"language":106,"meta":5},[104],"$ yarn build\n\n(!) Entry module \"src/main.ts\" is implicitly using \"default\" export mode, which means for CommonJS output that its default export is assigned to \"module.exports\". ... 이하 생략\n\ncreated dist in 5.6s\n✨  Done in 6.49s.\n",[832],{"type":13,"tag":109,"props":833,"children":834},{},[835],{"type":13,"tag":101,"props":836,"children":837},{"__ignoreMap":5},[838],{"type":18,"value":830},{"type":13,"tag":14,"props":840,"children":841},{},[842],{"type":18,"value":843},"정상적으로 빌드가 되었습니다. 빌드 타임은 약간 더 길어졌지만, 결과물은 기존과 같습니다.",{"type":13,"tag":14,"props":845,"children":846},{},[847],{"type":18,"value":848},"다만 새로운 경고 메세지가 등장했습니다.",{"type":13,"tag":14,"props":850,"children":851},{},[852,854,858,860,864,866,871],{"type":18,"value":853},"기본적으로 ",{"type":13,"tag":21,"props":855,"children":856},{},[857],{"type":18,"value":44},{"type":18,"value":859}," 은 우리의 모듈을 번들링할 때 단 하나의 객체를 내보내는 ",{"type":13,"tag":21,"props":861,"children":862},{},[863],{"type":18,"value":411},{"type":18,"value":865}," 인지, 아니면 ",{"type":13,"tag":21,"props":867,"children":868},{},[869],{"type":18,"value":870},"default",{"type":18,"value":872}," 없이 일일이 이름을 지어서 내보내는지 추측해서 번들링 하도록 되어있습니다.",{"type":13,"tag":14,"props":874,"children":875},{},[876,881,883,887,889,894,896,901],{"type":13,"tag":21,"props":877,"children":878},{},[879],{"type":18,"value":880},"output.exports",{"type":18,"value":882}," 의 옵션으로 ",{"type":13,"tag":21,"props":884,"children":885},{},[886],{"type":18,"value":870},{"type":18,"value":888},", ",{"type":13,"tag":21,"props":890,"children":891},{},[892],{"type":18,"value":893},"named",{"type":18,"value":895}," 아니면 ",{"type":13,"tag":21,"props":897,"children":898},{},[899],{"type":18,"value":900},"none",{"type":18,"value":902}," 3가지 옵션을 주고 있습니다.",{"type":13,"tag":14,"props":904,"children":905},{},[906,910,912,916,918,922],{"type":13,"tag":21,"props":907,"children":908},{},[909],{"type":18,"value":44},{"type":18,"value":911}," 의 권장사항은 ",{"type":13,"tag":21,"props":913,"children":914},{},[915],{"type":18,"value":893},{"type":18,"value":917}," 입니다. 애초에 코드를 작성할 때도 마지막에 ",{"type":13,"tag":21,"props":919,"children":920},{},[921],{"type":18,"value":411},{"type":18,"value":923}," 를 하지 않기를 권장합니다.",{"type":13,"tag":101,"props":925,"children":928},{"className":926,"code":927,"filename":32,"language":237,"meta":5},[235],"import { nodeResolve } from '@rollup/plugin-node-resolve'\nimport commonjs from '@rollup/plugin-commonjs'\nimport typescript from '@rollup/plugin-typescript'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    dir: 'dist',\n    format: 'cjs',\n    exports: 'named'\n  },\n  plugins: [\n    nodeResolve(),\n    commonjs({ extensions: ['.js', '.ts'] }),\n    typescript()\n  ]\n}\n",[929],{"type":13,"tag":109,"props":930,"children":931},{},[932],{"type":13,"tag":101,"props":933,"children":934},{"__ignoreMap":5},[935],{"type":18,"value":927},{"type":13,"tag":14,"props":937,"children":938},{},[939,944],{"type":13,"tag":21,"props":940,"children":941},{},[942],{"type":18,"value":943},"exports",{"type":18,"value":945}," 를 추가하면 더 이상 경고 메시지는 나오지 않습니다.",{"type":13,"tag":89,"props":947,"children":949},{"id":948},"파일을-더-압축해보자",[950],{"type":18,"value":951},"파일을 더 압축해보자",{"type":13,"tag":14,"props":953,"children":954},{},[955],{"type":18,"value":956},"사실 지금 번들링의 결과물은 불필요한 공백이 파일 크기를 많이 잡아먹고 있습니다. 이를 모두 제거해버립시다.",{"type":13,"tag":101,"props":958,"children":961},{"className":959,"code":960,"language":106,"meta":5},[104],"$ yarn add -D rollup-plugin-terser\n",[962],{"type":13,"tag":109,"props":963,"children":964},{},[965],{"type":13,"tag":101,"props":966,"children":967},{"__ignoreMap":5},[968],{"type":18,"value":960},{"type":13,"tag":14,"props":970,"children":971},{},[972],{"type":18,"value":973},"다음은 설정 파일을 수정합시다.",{"type":13,"tag":101,"props":975,"children":978},{"className":976,"code":977,"filename":32,"language":237,"meta":5},[235],"import { nodeResolve } from '@rollup/plugin-node-resolve'\nimport commonjs from '@rollup/plugin-commonjs'\nimport typescript from '@rollup/plugin-typescript'\nimport { terser } from 'rollup-plugin-terser'\n\nexport default {\n  input: 'src/main.js',\n  output: {\n    dir: 'dist',\n    format: 'cjs',\n    exports: 'named'\n  },\n  plugins: [\n    nodeResolve(),\n    commonjs({ extensions: ['.js', '.ts'] }),\n    typescript(),\n    terser()\n  ]\n}\n",[979],{"type":13,"tag":109,"props":980,"children":981},{},[982],{"type":13,"tag":101,"props":983,"children":984},{"__ignoreMap":5},[985],{"type":18,"value":977},{"type":13,"tag":14,"props":987,"children":988},{},[989,991,995,997,1002],{"type":18,"value":990},"빌드 후 파일을 열어보면 공백이 모두 제거 되었고, 파일이 ",{"type":13,"tag":288,"props":992,"children":993},{},[994],{"type":18,"value":550},{"type":18,"value":996},"에서 ",{"type":13,"tag":288,"props":998,"children":999},{},[1000],{"type":18,"value":1001},"1.3MB",{"type":18,"value":1003},"까지 줄어들었습니다.",{"type":13,"tag":89,"props":1005,"children":1007},{"id":1006},"마무리",[1008],{"type":18,"value":1006},{"type":13,"tag":14,"props":1010,"children":1011},{},[1012],{"type":18,"value":1013},"이상으로 Rollup 번들러를 이용해서 간단하게 번들링에 대해서 알아보았습니다.",{"type":13,"tag":14,"props":1015,"children":1016},{},[1017],{"type":18,"value":1018},"사실 오픈 소스 프로젝트처럼 다른 사람들을 위해 라이브러리를 만드는 것이 아니라면, 번들링 하는 방법을 직접적으로 알 필요는 없습니다. 이미 대부분의 메이저 프레임워크들은 내부적으로 잘 구현이 되어있기 때문입니다.",{"type":13,"tag":14,"props":1020,"children":1021},{},[1022,1024,1029,1031,1036],{"type":18,"value":1023},"하지만 내가 만든 툴을 ",{"type":13,"tag":21,"props":1025,"children":1026},{},[1027],{"type":18,"value":1028},"npm",{"type":18,"value":1030},"이나 ",{"type":13,"tag":21,"props":1032,"children":1033},{},[1034],{"type":18,"value":1035},"CDN",{"type":18,"value":1037}," 같이 사람들에게 툴로써 제공하고 싶다면, 번들링은 선택이 아닌 필수라고 생각합니다.",{"title":5,"searchDepth":1039,"depth":1039,"links":1040},2,[1041,1042,1043,1044,1045],{"id":91,"depth":1039,"text":94},{"id":253,"depth":1039,"text":256},{"id":584,"depth":1039,"text":584},{"id":948,"depth":1039,"text":951},{"id":1006,"depth":1039,"text":1006},"markdown","content:rollupjs-using-plugin.md","content","rollupjs-using-plugin.md","md",1691494669436]