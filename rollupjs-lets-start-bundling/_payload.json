[{"data":1,"prerenderedAt":833},["Reactive",2],{"content-query-dxHLBFDkEz":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":5,"_empty":6,"title":7,"description":8,"excerpt":9,"category":32,"thumbnail":33,"updated":34,"created":34,"published":35,"body":36,"_type":828,"_id":829,"_source":830,"_file":831,"_extension":832},"/rollupjs-lets-start-bundling","",false,"Rollup.js - 번들링, 파일을 하나로 합쳐보자","번들링 이라는 말을 프론트엔드 개발자라면 많이 들어보셨을겁니다. 번들링은, 파일을 하나로 묶는 것을 말합니다. 그럼 왜 굳이 파일을 하나로 묶어야 할까요? 바로 HTTP 통신의 특성 때문입니다.",{"type":10,"children":11},"root",[12],{"type":13,"tag":14,"props":15,"children":16},"element","p",{},[17,24,26],{"type":13,"tag":18,"props":19,"children":20},"code-inline",{},[21],{"type":22,"value":23},"text","번들링",{"type":22,"value":25}," 이라는 말을 프론트엔드 개발자라면 많이 들어보셨을겁니다. 번들링은, 파일을 하나로 묶는 것을 말합니다. 그럼 왜 굳이 파일을 하나로 묶어야 할까요? 바로 ",{"type":13,"tag":27,"props":28,"children":29},"strong",{},[30],{"type":22,"value":31},"HTTP 통신의 특성 때문입니다.","tech","https://user-images.githubusercontent.com/20244536/107738251-a6002680-6d49-11eb-8708-dbe40704924e.png","2021-02-09T00:00:00.000Z",true,{"type":10,"children":37,"toc":819},[38,50,55,60,86,95,107,112,123,161,166,173,178,194,206,218,243,255,260,273,279,296,311,322,335,340,345,356,375,389,394,410,415,427,432,445,462,473,485,497,502,513,525,530,542,547,559,564,597,602,608,613,629,641,659,666,678,696,701,707,712,717,726,738,743,754,766,778,790,795,807],{"type":13,"tag":14,"props":39,"children":40},{},[41,45,46],{"type":13,"tag":18,"props":42,"children":43},{},[44],{"type":22,"value":23},{"type":22,"value":25},{"type":13,"tag":27,"props":47,"children":48},{},[49],{"type":22,"value":31},{"type":13,"tag":14,"props":51,"children":52},{},[53],{"type":22,"value":54},"단발성으로 리소스를 요청하는 HTTP 특성상, 요청할 파일이 많으면 그만큼 요청을 많이 보내야해서 비효율적입니다. 그래서 번들링해서 파일을 하나로 묶으면 요청 횟수가 적어지니 효율적이겠죠.",{"type":13,"tag":14,"props":56,"children":57},{},[58],{"type":22,"value":59},"그만큼 프론트엔드에서 번들링은 정말 중요합니다. 사용자가 우리의 웹사이트를 방문했을 때, 최대한 빠르게 웹 페이지를 보여줘야하기 때문입니다.",{"type":13,"tag":14,"props":61,"children":62},{},[63,65,70,72,84],{"type":22,"value":64},"그럼 번들링은 어떻게 해야할까요? 바로 ",{"type":13,"tag":27,"props":66,"children":67},{},[68],{"type":22,"value":69},"번들러",{"type":22,"value":71},"라는 녀석을 이용하면 됩니다. 대표적으로 ",{"type":13,"tag":73,"props":74,"children":78},"a",{"href":75,"rel":76},"https://webpack.js.org/",[77],"nofollow",[79],{"type":13,"tag":18,"props":80,"children":81},{},[82],{"type":22,"value":83},"Webpack",{"type":22,"value":85},"이 있습니다. 예전과 다르게 웹팩이 많이 개선되어서, 설정 없이도 간단한 번들링은 쉽게 가능합니다.",{"type":13,"tag":14,"props":87,"children":88},{},[89],{"type":13,"tag":90,"props":91,"children":94},"img",{"alt":92,"src":93},"image","https://user-images.githubusercontent.com/20244536/107313452-e48dab00-6ad5-11eb-8a9b-223341b52217.png",[],{"type":13,"tag":14,"props":96,"children":97},{},[98,100,105],{"type":22,"value":99},"위 그림은 웹팩이 가장 왼쪽 위에 위치한 최초 진입점인 ",{"type":13,"tag":18,"props":101,"children":102},{},[103],{"type":22,"value":104},".js",{"type":22,"value":106}," 파일을 읽어서, 그 파일이 참조 하고 있는 다른 여러 형식들의 파일들을 하나로 묶어 최종적으로 js, css, jpg, png로 만든다는 과정을 설명한 그림입니다. 이해가 안가셔도 됩니다. 그냥 최초 진입점이 될 파일 1개를 선택한다는 것만 알아두시면 됩니다.",{"type":13,"tag":14,"props":108,"children":109},{},[110],{"type":22,"value":111},"그리고 번들러를 사용해야하는 큰 이유가 있습니다. 번들러는 이제 단순히 번들링만 하는 게 아니라, 용량 압축과 구형 브라우저 지원, Polyfill 등 하나로 묶는 것 등 굉장히 많은 이점과 편의성을 가져다줍니다.",{"type":13,"tag":14,"props":113,"children":114},{},[115,117,121],{"type":22,"value":116},"거의 대부분 ",{"type":13,"tag":18,"props":118,"children":119},{},[120],{"type":22,"value":83},{"type":22,"value":122},"을 많이 사용하지만, 더욱 빠른 성능이나 Zero configuration을 강조한 후발 주자들도 많이 있습니다.",{"type":13,"tag":14,"props":124,"children":125},{},[126,136,138,148,149,159],{"type":13,"tag":73,"props":127,"children":130},{"href":128,"rel":129},"https://rollupjs.org/guide/en/",[77],[131],{"type":13,"tag":18,"props":132,"children":133},{},[134],{"type":22,"value":135},"Rollup",{"type":22,"value":137},", ",{"type":13,"tag":73,"props":139,"children":142},{"href":140,"rel":141},"https://parceljs.org/",[77],[143],{"type":13,"tag":18,"props":144,"children":145},{},[146],{"type":22,"value":147},"Parcel",{"type":22,"value":137},{"type":13,"tag":73,"props":150,"children":153},{"href":151,"rel":152},"https://esbuild.github.io/",[77],[154],{"type":13,"tag":18,"props":155,"children":156},{},[157],{"type":22,"value":158},"Esbuild",{"type":22,"value":160}," 정도가 있습니다.",{"type":13,"tag":14,"props":162,"children":163},{},[164],{"type":22,"value":165},"이번 포스팅에서는 Rollup을 이용해 번들링에 대해 간단하게 알아보겠습니다.",{"type":13,"tag":167,"props":168,"children":170},"h2",{"id":169},"프로젝트-구성",[171],{"type":22,"value":172},"프로젝트 구성",{"type":13,"tag":14,"props":174,"children":175},{},[176],{"type":22,"value":177},"먼저 프로젝트를 생성하고, 초기화해줍니다.",{"type":13,"tag":179,"props":180,"children":185},"code",{"className":181,"code":183,"language":184,"meta":5},[182],"language-bash","$ mkdir project && cd $_\n$ yarn init -y\n","bash",[186],{"type":13,"tag":187,"props":188,"children":189},"pre",{},[190],{"type":13,"tag":179,"props":191,"children":192},{"__ignoreMap":5},[193],{"type":22,"value":183},{"type":13,"tag":14,"props":195,"children":196},{},[197,199,204],{"type":22,"value":198},"rollup을 사용하기 위해 패키지를 설치합니다. 이번 포스팅에선 ",{"type":13,"tag":18,"props":200,"children":201},{},[202],{"type":22,"value":203},"faker.js",{"type":22,"value":205},"도 같이 사용할 예정입니다.",{"type":13,"tag":179,"props":207,"children":210},{"className":208,"code":209,"language":184,"meta":5},[182],"$ yarn add -D rollup\n$ yarn add faker\n",[211],{"type":13,"tag":187,"props":212,"children":213},{},[214],{"type":13,"tag":179,"props":215,"children":216},{"__ignoreMap":5},[217],{"type":22,"value":209},{"type":13,"tag":14,"props":219,"children":220},{},[221,223,228,230,235,237,241],{"type":22,"value":222},"프로젝트를 번들링하기 위해 최초 rollup이 읽어들어야 할 파일이 있어야겠죠. 저는 ",{"type":13,"tag":18,"props":224,"children":225},{},[226],{"type":22,"value":227},"src",{"type":22,"value":229}," 디렉토리 아래에 ",{"type":13,"tag":18,"props":231,"children":232},{},[233],{"type":22,"value":234},"main.js",{"type":22,"value":236}," 파일과 ",{"type":13,"tag":18,"props":238,"children":239},{},[240],{"type":22,"value":203},{"type":22,"value":242}," 파일 2개를 만들도록 하겠습니다.",{"type":13,"tag":179,"props":244,"children":247},{"className":245,"code":246,"language":184,"meta":5},[182],"$ mkdir src\n$ touch src/main.js\n$ touch src/faker.js\n",[248],{"type":13,"tag":187,"props":249,"children":250},{},[251],{"type":13,"tag":179,"props":252,"children":253},{"__ignoreMap":5},[254],{"type":22,"value":246},{"type":13,"tag":14,"props":256,"children":257},{},[258],{"type":22,"value":259},"여기까지 구성하셨다면 프로젝트의 구조는 다음과 같습니다.",{"type":13,"tag":179,"props":261,"children":265},{"className":262,"code":264},[263],"language-undefined","project\n|- node_modules/\n|- src/\n    |-- main.js\n    |-- faker.js\n|- package.json\n|- yarn.lock\n",[266],{"type":13,"tag":187,"props":267,"children":268},{},[269],{"type":13,"tag":179,"props":270,"children":271},{"__ignoreMap":5},[272],{"type":22,"value":264},{"type":13,"tag":167,"props":274,"children":276},{"id":275},"모듈-작성하기",[277],{"type":22,"value":278},"모듈 작성하기",{"type":13,"tag":14,"props":280,"children":281},{},[282,284,288,290,294],{"type":22,"value":283},"자 그러면 진입점이 될 파일인 ",{"type":13,"tag":18,"props":285,"children":286},{},[287],{"type":22,"value":234},{"type":22,"value":289},"를 작성하기 전에, ",{"type":13,"tag":18,"props":291,"children":292},{},[293],{"type":22,"value":203},{"type":22,"value":295},"을 이용해서 랜덤한 이름을 만들어주는 우리의 모듈(함수)부터 만들어보도록 하겠습니다.",{"type":13,"tag":179,"props":297,"children":303},{"className":298,"code":300,"filename":301,"language":302,"meta":5},[299],"language-js","import faker from \"faker\";\n\nexport const GenerateName = () => {\n  return faker.name.findName();\n};\n","src/faker.js","js",[304],{"type":13,"tag":187,"props":305,"children":306},{},[307],{"type":13,"tag":179,"props":308,"children":309},{"__ignoreMap":5},[310],{"type":22,"value":300},{"type":13,"tag":14,"props":312,"children":313},{},[314,316,320],{"type":22,"value":315},"방금 만든 모듈을 이용해서 ",{"type":13,"tag":18,"props":317,"children":318},{},[319],{"type":22,"value":234},{"type":22,"value":321},"를 구성해보도록 하겠습니다.",{"type":13,"tag":179,"props":323,"children":327},{"className":324,"code":325,"filename":326,"language":302,"meta":5},[299],"import { GenerateName } from \"./faker\";\n\nfunction Init() {\n  const name = GenerateName();\n  console.log(`name: ${name}`);\n}\n\nInit();\n","src/main.js",[328],{"type":13,"tag":187,"props":329,"children":330},{},[331],{"type":13,"tag":179,"props":332,"children":333},{"__ignoreMap":5},[334],{"type":22,"value":325},{"type":13,"tag":14,"props":336,"children":337},{},[338],{"type":22,"value":339},"이상으로 프로젝트를 실행시킬 때 마다 이름을 랜덤으로 출력해주는 간단한 모듈을 만들어보았습니다.",{"type":13,"tag":167,"props":341,"children":343},{"id":342},"번들링하기",[344],{"type":22,"value":342},{"type":13,"tag":14,"props":346,"children":347},{},[348,350,354],{"type":22,"value":349},"맨 처음 설명드린 것처럼, ",{"type":13,"tag":27,"props":351,"children":352},{},[353],{"type":22,"value":69},{"type":22,"value":355},"는 다수의 파일을 하나의 파일로 묶어주는 역할을 한다고 했습니다. 이 말에 따르면 우리의 프로젝트는 현재 2개의 파일로 분리되어 있지만, 결과는 1개의 파일로 나와야합니다.",{"type":13,"tag":14,"props":357,"children":358},{},[359,361,366,368,373],{"type":22,"value":360},"커맨드라인 인터페이스를 이용하면 아주 간단하게 번들링을 할 수 있습니다. cli를 이용하기위해 ",{"type":13,"tag":18,"props":362,"children":363},{},[364],{"type":22,"value":365},"package.json",{"type":22,"value":367}," 내부에 ",{"type":13,"tag":18,"props":369,"children":370},{},[371],{"type":22,"value":372},"scripts",{"type":22,"value":374},"를 추가해주도록 합시다.",{"type":13,"tag":179,"props":376,"children":381},{"className":377,"code":379,"filename":365,"language":380,"meta":5},[378],"language-json","{\n  \"scripts\": {\n    \"build\": \"rollup src/main.js --file dist/main.js\"\n  }\n}\n","json",[382],{"type":13,"tag":187,"props":383,"children":384},{},[385],{"type":13,"tag":179,"props":386,"children":387},{"__ignoreMap":5},[388],{"type":22,"value":379},{"type":13,"tag":14,"props":390,"children":391},{},[392],{"type":22,"value":393},"옵션에 대한 설명은 두 번째 자리에 진입점이 될 파일을 넣고, --file 옵션에는 번들링된 결과 파일 명을 적어주면 되겠습니다.",{"type":13,"tag":395,"props":396,"children":397},"blockquote",{},[398],{"type":13,"tag":14,"props":399,"children":400},{},[401,403,408],{"type":22,"value":402},"프로젝트 내부에만 rollup을 설치했기 때문에 명령어를 터미널에 직접치면 작동하지 않습니다. 터미널에서도 실행시키고 싶다면 ",{"type":13,"tag":18,"props":404,"children":405},{},[406],{"type":22,"value":407},"$ yarn add global rollup",{"type":22,"value":409},"으로 설치해주세요.",{"type":13,"tag":14,"props":411,"children":412},{},[413],{"type":22,"value":414},"그럼 이제 우리의 모듈을 번들링합시다.",{"type":13,"tag":179,"props":416,"children":419},{"className":417,"code":418,"language":184,"meta":5},[182],"$ yarn build\n\n# log\n$ rollup src/main.js --file dist/main.js\n\nsrc/main.js → dist/main.js...\n(!) Unresolved dependencies\nhttps://rollupjs.org/guide/en/#warning-treating-module-as-external-dependency\nfaker (imported by src/faker.js)\ncreated dist/main.js in 43ms\n✨  Done in 0.45s.\n",[420],{"type":13,"tag":187,"props":421,"children":422},{},[423],{"type":13,"tag":179,"props":424,"children":425},{"__ignoreMap":5},[426],{"type":22,"value":418},{"type":13,"tag":14,"props":428,"children":429},{},[430],{"type":22,"value":431},"성공적으로 번들링되었습니다! 현재는 경고가 하나 뜨는걸로 보이는데, 일단은 결과 파일을 살펴보도록 하겠습니다.",{"type":13,"tag":179,"props":433,"children":437},{"className":434,"code":435,"filename":436,"language":302,"meta":5},[299],"import faker from \"faker\";\n\nconst GenerateName = () => {\n  return faker.name.findName();\n};\n\nfunction Init() {\n  const name = GenerateName();\n  console.log(`name: ${name}`);\n}\n\nInit();\n","dist/main.js",[438],{"type":13,"tag":187,"props":439,"children":440},{},[441],{"type":13,"tag":179,"props":442,"children":443},{"__ignoreMap":5},[444],{"type":22,"value":435},{"type":13,"tag":14,"props":446,"children":447},{},[448,450,454,456,460],{"type":22,"value":449},"분리되어있던 ",{"type":13,"tag":18,"props":451,"children":452},{},[453],{"type":22,"value":203},{"type":22,"value":455}," 파일의 코드들이 ",{"type":13,"tag":18,"props":457,"children":458},{},[459],{"type":22,"value":234},{"type":22,"value":461},"에 합쳐져있음을 확인할 수 있습니다.",{"type":13,"tag":14,"props":463,"children":464},{},[465,467,471],{"type":22,"value":466},"우리의 모듈이 잘 동작하는지 테스트를 위해 ",{"type":13,"tag":18,"props":468,"children":469},{},[470],{"type":22,"value":365},{"type":22,"value":472},"에 스크립트를 추가합시다.",{"type":13,"tag":179,"props":474,"children":477},{"className":475,"code":476,"filename":365,"language":380,"meta":5},[378],"{\n  \"scripts\": {\n    \"build\": \"rollup src/main.js --file dist/main.js\",\n    \"start\": \"node dist/main.js\"\n  }\n}\n",[478],{"type":13,"tag":187,"props":479,"children":480},{},[481],{"type":13,"tag":179,"props":482,"children":483},{"__ignoreMap":5},[484],{"type":22,"value":476},{"type":13,"tag":179,"props":486,"children":489},{"className":487,"code":488,"language":184,"meta":5},[182],"$ yarn start\n\n# log\nimport faker from 'faker';\n^^^^^^\n\nSyntaxError: Cannot use import statement outside a module\n",[490],{"type":13,"tag":187,"props":491,"children":492},{},[493],{"type":13,"tag":179,"props":494,"children":495},{"__ignoreMap":5},[496],{"type":22,"value":488},{"type":13,"tag":14,"props":498,"children":499},{},[500],{"type":22,"value":501},"import 구문을 사용할 수 없다는 오류가 출력되고 있습니다. 이 부분은 rollup의 문제는 아니고, node에서 최신 자바스크립트 문법을 해석할 수 없기 때문에 발생하는 오류입니다.",{"type":13,"tag":14,"props":503,"children":504},{},[505,507,511],{"type":22,"value":506},"감사하게도 번들링 과정에서 최신 자바스크립트 문법을 node에서 해석할 수 있도록 바꿔주는 옵션이 있습니다. ",{"type":13,"tag":18,"props":508,"children":509},{},[510],{"type":22,"value":365},{"type":22,"value":512},"를 수정합시다.",{"type":13,"tag":179,"props":514,"children":517},{"className":515,"code":516,"filename":365,"language":380,"meta":5},[378],"{\n  \"scripts\": {\n    \"build\": \"rollup src/main.js --file dist/main.js --format cjs\"\n  }\n}\n",[518],{"type":13,"tag":187,"props":519,"children":520},{},[521],{"type":13,"tag":179,"props":522,"children":523},{"__ignoreMap":5},[524],{"type":22,"value":516},{"type":13,"tag":14,"props":526,"children":527},{},[528],{"type":22,"value":529},"수정한 뒤 결과 파일을 다시 살펴보도록 하겠습니다.",{"type":13,"tag":179,"props":531,"children":534},{"className":532,"code":533,"language":302,"meta":5},[299],"// dist/main.js\n\n\"use strict\";\n\nvar faker = require(\"faker\");\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === \"object\" && \"default\" in e ? e : { default: e };\n}\n\nvar faker__default = /*#__PURE__*/ _interopDefaultLegacy(faker);\n\nconst GenerateName = () => {\n  return faker__default[\"default\"].name.findName();\n};\n\nfunction Init() {\n  const name = GenerateName();\n  console.log(`name: ${name}`);\n}\n\nInit();\n",[535],{"type":13,"tag":187,"props":536,"children":537},{},[538],{"type":13,"tag":179,"props":539,"children":540},{"__ignoreMap":5},[541],{"type":22,"value":533},{"type":13,"tag":14,"props":543,"children":544},{},[545],{"type":22,"value":546},"이것 저것 코드가 많이 추가되었는데 다시 테스트 해보도록 하겠습니다.",{"type":13,"tag":179,"props":548,"children":551},{"className":549,"code":550,"language":184,"meta":5},[182],"$ yarn start\n\n# log\n$ node dist/main.js\nname: Cesar Greenholt\n✨  Done in 0.72s.\n",[552],{"type":13,"tag":187,"props":553,"children":554},{},[555],{"type":13,"tag":179,"props":556,"children":557},{"__ignoreMap":5},[558],{"type":22,"value":550},{"type":13,"tag":14,"props":560,"children":561},{},[562],{"type":22,"value":563},"잘 작동하는걸 확인할 수 있습니다!",{"type":13,"tag":14,"props":565,"children":566},{},[567,569,574,576,581,583,588,590,595],{"type":22,"value":568},"그냥 넘어가기 전에 포맷에 대한 간략한 설명입니다. ",{"type":13,"tag":18,"props":570,"children":571},{},[572],{"type":22,"value":573},"--format",{"type":22,"value":575}," 옵션에는 몇 가지가 있는데, node에서 사용하는 모듈이라면 ",{"type":13,"tag":18,"props":577,"children":578},{},[579],{"type":22,"value":580},"cjs",{"type":22,"value":582},"를 사용하면 되고, 브라우저에서 사용한다면 ",{"type":13,"tag":18,"props":584,"children":585},{},[586],{"type":22,"value":587},"iife",{"type":22,"value":589},", 둘 다 사용하고 싶다면 ",{"type":13,"tag":18,"props":591,"children":592},{},[593],{"type":22,"value":594},"umd",{"type":22,"value":596}," 옵션을 주면 됩니다.",{"type":13,"tag":14,"props":598,"children":599},{},[600],{"type":22,"value":601},"\"무조건 umd로 하면 되겠네\" 라고 생각하실 수 있지만, 당연히 번들링된 파일의 크기가 커집니다. 파일이 불필요하게 커지지 않도록 각 사용 환경에 맞게 구성하시면 되겠습니다.",{"type":13,"tag":167,"props":603,"children":605},{"id":604},"tree-shaking",[606],{"type":22,"value":607},"Tree shaking",{"type":13,"tag":14,"props":609,"children":610},{},[611],{"type":22,"value":612},"번들링을 하면서 얻을 수 있는 큰 장점 중 하나는 내 프로젝트가 가져오는 외부 모듈들이 아주 많을텐데, 그 중에 실제로 사용되는 코드들만 번들링 결과물에 포함시켜준다는 점입니다.",{"type":13,"tag":14,"props":614,"children":615},{},[616,618,627],{"type":22,"value":617},"이를 ",{"type":13,"tag":73,"props":619,"children":622},{"href":620,"rel":621},"https://webpack.js.org/guides/tree-shaking/",[77],[623],{"type":13,"tag":18,"props":624,"children":625},{},[626],{"type":22,"value":607},{"type":22,"value":628},"이라고 합니다. 예시를 보도록 합시다.",{"type":13,"tag":179,"props":630,"children":633},{"className":631,"code":632,"language":302,"meta":5},[299],"// src/faker.js\n\nimport faker from \"faker\";\n\nexport const GenerateName = () => {\n  return faker.name.findName();\n};\n\nexport const Test = () => {\n  return \"Some string\";\n};\n",[634],{"type":13,"tag":187,"props":635,"children":636},{},[637],{"type":13,"tag":179,"props":638,"children":639},{"__ignoreMap":5},[640],{"type":22,"value":632},{"type":13,"tag":14,"props":642,"children":643},{},[644,646,650,652,657],{"type":22,"value":645},"기존에 작성했던 ",{"type":13,"tag":18,"props":647,"children":648},{},[649],{"type":22,"value":203},{"type":22,"value":651}," 파일에 ",{"type":13,"tag":18,"props":653,"children":654},{},[655],{"type":22,"value":656},"Test()",{"type":22,"value":658}," 함수를 추가해서 내보내도록 했습니다.",{"type":13,"tag":14,"props":660,"children":661},{},[662],{"type":13,"tag":27,"props":663,"children":664},{},[665],{"type":22,"value":234},{"type":13,"tag":179,"props":667,"children":670},{"className":668,"code":669,"language":302,"meta":5},[299],"import { GenerateName, Test } from \"./faker\";\n\nfunction Init() {\n  const name = GenerateName();\n  console.log(`name: ${name}`);\n}\n\nInit();\n",[671],{"type":13,"tag":187,"props":672,"children":673},{},[674],{"type":13,"tag":179,"props":675,"children":676},{"__ignoreMap":5},[677],{"type":22,"value":669},{"type":13,"tag":14,"props":679,"children":680},{},[681,683,688,690,694],{"type":22,"value":682},"그리고 ",{"type":13,"tag":18,"props":684,"children":685},{},[686],{"type":22,"value":687},"Test",{"type":22,"value":689}," 함수를 가져오도록 코드를 추가하고 번들링을 해보면 ",{"type":13,"tag":18,"props":691,"children":692},{},[693],{"type":22,"value":687},{"type":22,"value":695}," 함수가 포함되어 있어야 할 것 같지만, 모듈을 가져오는 부분에서 실제로 사용하진 않고 있기 때문에 결과물에 포함시키지 않습니다.",{"type":13,"tag":14,"props":697,"children":698},{},[699],{"type":22,"value":700},"이러한 부분은 기능이 많은 다른 모듈들을 가져올 때 굉장한 도움이 됩니다.",{"type":13,"tag":167,"props":702,"children":704},{"id":703},"rollupconfigjs",[705],{"type":22,"value":706},"rollup.config.js",{"type":13,"tag":14,"props":708,"children":709},{},[710],{"type":22,"value":711},"번들러를 사용하다보면 CLI 설정 옵션이 너무 길어지는 상황이 발생합니다. 그리고 한 줄에 모두 작성해야하기 때문에 보기에도 좋지 않습니다. 또 번들링 환경에 따라 다른 결과 파일을 만들어내야할 수 도 있습니다.",{"type":13,"tag":14,"props":713,"children":714},{},[715],{"type":22,"value":716},"그런 몇몇 상황들을 충족시키기 위해 자바스크립트 파일로 번들링 옵션을 설정할 수 있도록 기능을 제공하고 있습니다.",{"type":13,"tag":14,"props":718,"children":719},{},[720,724],{"type":13,"tag":18,"props":721,"children":722},{},[723],{"type":22,"value":365},{"type":22,"value":725}," 파일을 수정합시다.",{"type":13,"tag":179,"props":727,"children":730},{"className":728,"code":729,"filename":365,"language":380,"meta":5},[378],"{\n  \"scripts\": {\n    \"build\": \"rollup -c\"\n  }\n}\n",[731],{"type":13,"tag":187,"props":732,"children":733},{},[734],{"type":13,"tag":179,"props":735,"children":736},{"__ignoreMap":5},[737],{"type":22,"value":729},{"type":13,"tag":14,"props":739,"children":740},{},[741],{"type":22,"value":742},"코드가 많이 짧아졌습니다.",{"type":13,"tag":14,"props":744,"children":745},{},[746,748,752],{"type":22,"value":747},"-c 뒤에는 설정 파일 경로를 넣어주면 되는데, 설정하지 않는다면 프로젝트 루트 디렉토리의 ",{"type":13,"tag":18,"props":749,"children":750},{},[751],{"type":22,"value":706},{"type":22,"value":753}," 파일을 찾도록 되어있습니다. 이것도 같이 구성하도록 하겠습니다.",{"type":13,"tag":179,"props":755,"children":758},{"className":756,"code":757,"language":184,"meta":5},[182],"$ touch rollup.config.js\n",[759],{"type":13,"tag":187,"props":760,"children":761},{},[762],{"type":13,"tag":179,"props":763,"children":764},{"__ignoreMap":5},[765],{"type":22,"value":757},{"type":13,"tag":179,"props":767,"children":770},{"className":768,"code":769,"filename":706,"language":302,"meta":5},[299],"export default {\n  input: \"src/main.js\",\n  output: {\n    dir: \"dist\",\n    format: \"cjs\",\n  },\n};\n",[771],{"type":13,"tag":187,"props":772,"children":773},{},[774],{"type":13,"tag":179,"props":775,"children":776},{"__ignoreMap":5},[777],{"type":22,"value":769},{"type":13,"tag":14,"props":779,"children":780},{},[781,783,788],{"type":22,"value":782},"이렇게 구성해주면 원래 작성했던 cli 코드와 설정이 같아집니다. 테스트를 위해 ",{"type":13,"tag":18,"props":784,"children":785},{},[786],{"type":22,"value":787},"yarn build",{"type":22,"value":789},"를 이용해 번들링해보면 이전과 같은 결과가 나옵니다.",{"type":13,"tag":167,"props":791,"children":793},{"id":792},"마무리",[794],{"type":22,"value":792},{"type":13,"tag":14,"props":796,"children":797},{},[798,800,805],{"type":22,"value":799},"여기까지 다룰 수 있다면 다른 node 프로젝트에서 가져다 사용하기 위해 ",{"type":13,"tag":18,"props":801,"children":802},{},[803],{"type":22,"value":804},"npm",{"type":22,"value":806},"에 배포하는 데 큰 어려움은 없지만, rollup에 호환되지 않는 포맷으로 작성된 모듈들을 가져다가 사용하면서 생기는 문제가 있을 수 있습니다. 또 타입스크립트로 작성하고 싶거나, 공백까지도 모두 지워버려서 파일 크기를 최대한으로 줄이고 싶다거나 한다면 플러그인을 사용해야 합니다.",{"type":13,"tag":14,"props":808,"children":809},{},[810,812,817],{"type":22,"value":811},"2부에서는 이러한 문제를 아주 쉽게 해결할 수 있는 ",{"type":13,"tag":27,"props":813,"children":814},{},[815],{"type":22,"value":816},"플러그인",{"type":22,"value":818},"에 대해서 알아보도록 하겠습니다.",{"title":5,"searchDepth":820,"depth":820,"links":821},2,[822,823,824,825,826,827],{"id":169,"depth":820,"text":172},{"id":275,"depth":820,"text":278},{"id":342,"depth":820,"text":342},{"id":604,"depth":820,"text":607},{"id":703,"depth":820,"text":706},{"id":792,"depth":820,"text":792},"markdown","content:rollupjs-lets-start-bundling.md","content","rollupjs-lets-start-bundling.md","md",1691494669436]